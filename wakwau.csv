SQLSTATE[42000]: [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]The multi-part identifier "tbl_assignment.employee_id" could not be bound. (SQL: select * from [request_ghm] where ([tbl_assignment].[employee_id] is null and [request_ghm].[requestStatus] in (3)) or [request_ghm].[user_id] = 7)

public function dashboard()
    {
        $userId = auth()->user()->id;
        $requests = Ghm::where('requestStatus', 3)
        ->orWhere('user_id', $userId)
        ->with('User')
        ->get();
        $rooms = Ghm_room::all();
        $locations = Location::all();
        $code = code::all();
        $emplo= Employee::with('Department')->get();
        $departments = Department::all();

        $emplomapped = $emplo->map(function($emp) {
            return [
                'id' => $emp->id,
                'FullName' => $emp->FullName,
                'SAPID' => $emp->SAPID,
                'department_id' => $emp->department_id,
            ];
        });

        $departmentsMapped = $departments->map(function ($dept) {
            return [
                'id' => $dept->id,
                'DepartmentName' => $dept->DepartmentName
            ];
        });

        $totalPeopleData = DB::select("
        SELECT 
            request_ghm.id,
            COALESCE(SUM(EmployeeCount), 0) AS totalEmployee,
            COALESCE(SUM(GuestCount), 0) AS totalGuest,
            COALESCE(SUM(FamilyCount), 0) AS totalFamily,
            COALESCE(SUM(EmployeeCount + GuestCount + FamilyCount), 0) AS totalAll
        FROM 
            request_ghm
        CROSS APPLY (SELECT COUNT(*) AS EmployeeCount FROM OPENJSON(employee_id)) AS EmpData
        CROSS APPLY (SELECT COUNT(*) AS GuestCount FROM OPENJSON(guest)) AS GuestData
        CROSS APPLY (SELECT COUNT(*) AS FamilyCount FROM OPENJSON(family)) AS FamilyData
        GROUP BY id
        ");
        
        // Konversi hasil query ke associative array dengan ID sebagai key
        $totalPeopleArray = collect($totalPeopleData)->mapWithKeys(function ($item) {
            return [$item->id => $item->totalAll];
        });

        // Mapping booking
        $booking = $requests->map(function ($request) use ($rooms, $locations, $totalPeopleArray) {
            $room = $rooms->firstWhere('id', $request->ghm_room_id);
            $location = $room ? $locations->firstWhere('id', $room->location_id) : null;

        // Ambil totalPeople berdasarkan ID request
        $totalPeople = $totalPeopleArray[$request->id] ?? 0;
            return [                
                'id' => $request->id,
                'text' => $request->text,
                'guest' => $request->guest,
                'family' => $request->family,
                'employee_id' =>$request->employee_id,
                'ticketstatus'=> $request->ticketStatus,
                'completeddate' => $request->completeddate,
                'confirmationStatus' =>$request->confirmationStatus,
                'description' => $request->description,
                'requestStatus' => $request->requestStatus,
                'startDate' => $request->startDate ? $request->startDate->toIso8601String() : null,
                'endDate' => $request->endDate ? $request->endDate->toIso8601String() : null,
                'code' => $request->code ? $request->code->code : null,
                'creator' => $request->User ? $request->User->fullname : null,
                'ghm_room_id' => $request->ghm_room_id,
                'roomName' => $room ? $room->roomName : null,
                'location' => $location ? $location->Location : null,
                'totalPeople' => $totalPeople
            ];
        });
        
        $roomsWithLocations = $rooms->map(function ($room) use ($locations) {
            $location = $locations->firstWhere('id', $room->location_id);
            return [
                'text' => $room->roomName,
                'id' => $room->id,
                'roomAccupancy' => $room->roomAccupancy,
                'location' => $location ? $location->Location : null,
                'color' => '#'.substr(md5($room->roomName), 0, 6) // Generate color based on room name hash
            ];
        });

        // Getting unique locations
        $uniqueLocations = $roomsWithLocations->pluck('location')->unique()->values();

        return view('dashboard.ghm_booking', [
            'booking' => $booking,
            'roomsWithLocations' => $roomsWithLocations,
            'uniqueLocations' => $uniqueLocations,
            'emplo' => $emplomapped,
            'departments' =>$departmentsMapped,
        ]);
        // return response()->json([
        //     'booking' => $booking,
        //     'roomsWithLocations' => $roomsWithLocations,
        //     'uniqueLocations' => $uniqueLocations,
        //     'emplo' => $emplo
        // ]);
        // dd($booking);

    }



public function index(Request $request)
    {
        try {
            
            $id = $request->id;
            $user_id = $this->getAuth()->id;
            $employeeid = $this->getEmployeeID()->id;
            $module_id = $this->getModuleId($this->modulename);
            $isAdmin = $this->getAuth()->isAdmin;
            $requestData = $request->all();

            $dataquery = $this->model->query();

            // $userId = $user_id;
            // $moduleId = $module_id;
            $subquery = "(select TOP 1 
                CASE WHEN a.user_id='".$user_id."' 
                then 1 else 0 end 
                from tbl_approverListReq l
                left join tbl_approver a on l.approver_id=a.id
                left join tbl_approvaltype r on a.approvaltype_id = r.id 
                where l.ApprovalAction='1' 
                and l.req_id = request_ghm.id and l.module_id = '".$module_id."' 
                and request_ghm.requestStatus='1'
                order by a.sequence)";

            if(!$isAdmin) {
                $dataquery->leftJoin('tbl_assignment',function($join) use ( $user_id, $module_id){
                    $join->on('request_ghm.id','=','tbl_assignment.req_id')
                        ->where("request_ghm.user_id", "!=", $user_id)
                        ->where('tbl_assignment.module_id',$module_id);
                });
            }

            $data = $dataquery
                ->selectRaw("request_ghm.id,
                codes.code, 
                request_ghm.user_id,
                request_ghm.description,
                request_ghm_room.roomName,
                request_ghm_room.bu,
                request_ghm_room.sector,
                request_ghm.ghm_room_id,            
                request_ghm.text,
                request_ghm.description,
                request_ghm.requestStatus,
                request_ghm.completeddate,
                request_ghm.ticketStatus,
                request_ghm.confirmationStatus,
                request_ghm.confirmationRemarks,
                request_ghm.startDate,
                request_ghm.endDate,
                request_ghm.created_at,
                request_ghm.updated_at,
                (SELECT STRING_AGG(emp.fullname, ', ')
                FROM OPENJSON(request_ghm.employee_id) 
                WITH (employee_id INT '$')
                LEFT JOIN employee.tbl_employee AS emp
                ON emp.id = employee_id
                ) AS employee_fullname,
                (SELECT STRING_AGG(value, ', ') FROM OPENJSON(request_ghm.guest)) AS guest,
                (SELECT STRING_AGG(value, ', ') FROM OPENJSON(request_ghm.family)) AS family,
                request_ghm_room.location_id, 
                employee.tbl_location.Location, 

              

                    CASE WHEN request_ghm.user_id='".$user_id."' then 1 else 0 end as isMine,
                    ".$subquery." as isPendingOnMe
                ")
                ->leftJoin('codes', 'request_ghm.code_id', '=', 'codes.id')
                ->leftJoin('request_ghm_room', 'request_ghm.ghm_room_id', '=', 'request_ghm_room.id')
                ->leftJoin('employee.tbl_location', 'request_ghm_room.location_id', '=', 'employee.tbl_location.id')
                ->with(['user', 'approverlist'])
                ->where(function ($query) use ($subquery, $user_id, $isAdmin, $employeeid, $module_id) {
                    $query->whereRaw($subquery . " = 1")
                        ->orWhere(function ($query) use ($user_id, $isAdmin, $employeeid, $module_id) {
                            if ($isAdmin) {
                                $query->where("request_ghm.user_id", "!=", $user_id)
                                    ->whereIn("request_ghm.requestStatus", [0,1,3,4]);
                            }
                             else {
                                $query->where("tbl_assignment.employee_id",$employeeid)
                                    ->whereIn("request_ghm.requestStatus", [3]);
                            }
                        })
                        ->orWhere("request_ghm.user_id", $user_id);
                })
                ->orderBy(DB::raw($subquery), 'DESC')
                ->orderByRaw("CASE WHEN request_ghm.user_id = '".$user_id."' THEN 0 ELSE 1 END, request_ghm.created_at desc")
                ->get();

            return response()->json([
                'status' => "show",
                'message' => $this->getMessage()['show'],
                'data' => $data,
            ])->setEncodingOptions(JSON_NUMERIC_CHECK);

        } catch (\Exception $e) {

            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }
