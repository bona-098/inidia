onAppointmentFormOpening: function(e) {
                const form = e.form;
                const appointmentData = e.appointmentData;
                const isNewAppointment = !appointmentData.id;
                console.log('Appointment Data:', appointmentData); // Debug log

                if (appointmentData.employee_id && typeof appointmentData.employee_id === 'string') {
                    appointmentData.employee_id = deserializeFromJSON(appointmentData.employee_id);
                }
                if (appointmentData.guest && typeof appointmentData.guest === 'string') {
                    appointmentData.guest = deserializeFromJSON(appointmentData.guest);
                } else if (!appointmentData.guest) {
                    appointmentData.guest = ''; // Inisialisasi dengan string kosong jika nilai `guest` adalah `null` atau `undefined`
                }
                
                form.option('items', [
                    {
                        label: { text: 'Code' },
                        editorType: 'dxTextBox',
                        dataField: 'code',
                        disabled: true,
                        editorOptions: {
                            value: appointmentData.code || ''
                        }
                    },
                    {
                        label: { text: 'Subject' },
                        editorType: 'dxTextBox',
                        dataField: 'text',
                        editorOptions: {
                            value: appointmentData.text || ''
                        }
                    },
                    {
                        label: { text: 'Start Date' },
                        editorType: 'dxDateBox',
                        dataField: 'startDate',
                        editorOptions: {
                            type: 'datetime',
                            value: appointmentData.startDate || new Date(),
                            displayFormat: 'yyyy-MM-dd HH:mm:ss',
                            dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                        }
                    },
                    {
                        label: { text: 'End Date' },
                        editorType: 'dxDateBox',
                        dataField: 'endDate',
                        editorOptions: {
                            type: 'datetime',
                            value: appointmentData.endDate || new Date(),
                            displayFormat: 'yyyy-MM-dd HH:mm:ss',
                            dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                        }
                    },
                    {
                        label: { text: 'Room' },
                        editorType: 'dxSelectBox',
                        dataField: 'ghm_room_id',
                        editorOptions: {
                            dataSource: roomsWithLocations,
                            displayExpr: 'text',
                            valueExpr: 'id',
                            value: appointmentData.ghm_room_id || null
                        }
                    },
                    {
                        label: { text: 'Description' },
                        editorType: 'dxTextArea',
                        dataField: 'description',
                        editorOptions: {
                            value: appointmentData.description || ''
                        }
                    },
                    {
                        label: { text: 'Employee' },
                        editorType: 'dxTagBox',
                        dataField: 'employee_id',
                        editorOptions: {
                            dataSource: emplo,
                            displayExpr: 'FullName',
                            valueExpr: 'id',
                            value: appointmentData.employee_id || [],
                            showSelectionControls: true,
                            applyValueMode: 'useButtons',
                            searchEnabled: true
                        },
                    },
                    
                    {
                        label: { text: 'Guest' },
                        editorType: 'dxTextArea',
                        dataField: 'guest',
                        editorOptions: {
                            value: appointmentData.guest || '',
                            showSelectionControls: true,
                            applyValueMode: 'useButtons',
                        },
                        template: function(data, itemElement) {
                            let tags = appointmentData.guest.split(',').filter(tag => tag.trim() !== '');
                    
                            let guestSection = $("<div>").addClass("tags-input"); // Tambahkan class CSS
                    
                            let mainInput = $("<input>").attr({
                                type: "text-area",
                                placeholder: "Tambahkan guest lalu tekan Enter"
                            }).addClass("dxTextArea");
                    
                            mainInput.on("keydown", function (e) {
                                if (e.key === "Enter" && mainInput.val().trim() !== "") {
                                    e.preventDefault();
                                    let guestName = mainInput.val().trim();
                                    if (!tags.includes(guestName)) {
                                        tags.push(guestName);
                                        addTag(guestName);
                                    }
                                    mainInput.val(""); // Kosongkan input setelah input
                                    // Perbarui nilai `appointmentData.guest` dengan nilai yang diinginkan
                                    appointmentData.guest = tags.join(',');
                                }
                            });                            
                    
                            function addTag(text) {
                                let tag = $("<span>").addClass("tag").text(text);
                                let closeBtn = $("<span>").addClass("close").text("x");
                                closeBtn.on("click", function () {
                                    tags = tags.filter(t => t !== text);
                                    tag.remove();
                                    appointmentData.guest = tags.join(','); // Update appointmentData.guest setelah menghapus tag
                                });
                                tag.append(closeBtn);
                                guestSection.prepend(tag);
                            }
            
                            tags.forEach(tag => addTag(tag));
                            guestSection.append(mainInput);
                            guestSection.appendTo(itemElement);
                        }
                    },                  
                    {
                        label: { text: 'Family' },
                        editorType: 'dxTextArea',
                        dataField: 'family',
                        editorOptions: {
                            value: appointmentData.family || ''
                        }
                    },                    
                ]);
                // console.log(list-employeeall);
                // Add save and delete buttons to the form
                form.option('toolbarItems', [
                    {
                        widget: 'dxButton',
                        toolbar: 'bottom',
                        location: 'after',
                        options: {
                            text: isNewAppointment ? 'Save' : 'Update',
                            onClick: function() {
                                const formData = form.option('formData');
                                formData.employee_id = serializeToJSON(formData.employee_id);
                                formData.guest = serializeToJSON(formData.guest);
                                if (isNewAppointment) {
                                    sendRequest(apiurl + "/" + modname, "POST", formData).then(function(response) {
                                        if (response.status === 'success') {
                                            e.component._dataSource.reload();
                                            alert('Booking created successfully!');
                                        } else {
                                            alert('Error: ' + response.message);
                                        }
                                    }).catch(function(error) {
                                        alert('Error: ' + error.responseText);
                                    });
                                } else {
                                    formData.id = appointmentData.id; // Ensure id is included in formData
                                    console.log('Updating appointment with data:', formData); // Debug log
                                    sendRequest(apiurl + "/" + modname + "/" + formData.id, "PUT", formData).then(function(response) {
                                        console.log('Response from updating appointment:', response); // Debug log
                                        if (response.status === 'success') {
                                            e.component._dataSource.reload();
                                            alert('Booking updated successfully!');
                                        } else {
                                            alert('Error: ' + response.message);
                                        }
                                    }).catch(function(error) {
                                        console.error('Error from updating appointment:', error); // Debug log
                                        alert('Error: ' + error.responseText);
                                    });
                                }
                                e.component.hideAppointmentPopup();
                            }
                        }
                    },
                    {
                        widget: 'dxButton',
                        toolbar: 'bottom',
                        location: 'after',
                        visible: !isNewAppointment, // Make the delete button visible only for existing appointments
                        options: {
                            text: 'Delete',
                            onClick: function() {
                                console.log('Deleting appointment with ID:', appointmentData.id); // Debug log
                                if (confirm('Are you sure you want to delete this booking?')) {
                                    sendRequest(apiurl + "/" + modname + "/" + appointmentData.id, "DELETE").then(function(response) {
                                        console.log('Response from deleting appointment:', response); // Debug log
                                        if (response.status === 'success') {
                                            e.component._dataSource.reload();
                                            alert('Booking deleted successfully!');
                                        } else {
                                            alert('Error: ' + response.message);
                                        }
                                    }).catch(function(error) {
                                        console.error('Error from deleting appointment:', error); // Debug log
                                        alert('Error: ' + error.responseText);
                                    });
                                    e.component.hideAppointmentPopup();
                                }
                            }
                        }
                    }
                ]);

                // Ensure the popup can be opened again without refreshing the page
                e.component.option("onHidden", function() {
                    form.resetValues ? form.resetValues() : form.option('formData', {}); // Reset form values when popup is hidden
                    e.component.option("onHidden", null); // Clear the event handler
                });
            },
