onAppointmentFormOpening: function(e) {    
            const popup = e.popup;
            
            const appointmentData = e.appointmentData;
            let scheduler = e.component;

            let guestCount = safeArray(appointmentData.guest).length;
            let familyCount = safeArray(appointmentData.family).length;
            let employeeCount = safeArray(appointmentData.employee_id).length;
            let totalNewGuests = guestCount + familyCount + employeeCount;

            let selectedRoom = appointmentData.ghm_room_id;
            let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomAccupancy || 0;

            // Hitung total tamu per hari dalam rentang booking baru
            let dailyGuestCount = getTotalGuestsPerDay(scheduler, selectedRoom, appointmentData.startDate, appointmentData.endDate);

            // Cek apakah ada hari di mana jumlah tamu melebihi kapasitas kamar
            let bookingStart = new Date(appointmentData.startDate);
            let bookingEnd = new Date(appointmentData.endDate);
            for (let d = new Date(bookingStart); d <= bookingEnd; d.setDate(d.getDate() + 1)) {
                let dateKey = d.toISOString().split("T")[0]; // Format YYYY-MM-DD
                let totalGuestsAfterAdding = (dailyGuestCount[dateKey] || 0) + totalNewGuests;
    
                if (totalGuestsAfterAdding > roomCapacity) {
                    e.cancel = true; // Batalkan booking
                    DevExpress.ui.notify(`Kapasitas penuh pada ${dateKey}! (${dailyGuestCount[dateKey] || 0}/${roomCapacity})`, "error", 3000);
                    return;
                }
            }
    
            // Serialize array sebelum dikirim
            appointmentData.guest = JSON.stringify(appointmentData.guest);
            appointmentData.family = JSON.stringify(appointmentData.family);
            let toolbarItems = popup.option('toolbarItems');
            const doneButton = toolbarItems.find(item => item.options && item.options.text === 'Done');
            if (doneButton) {
                doneButton.options.onClick = function () {
                  Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to proceed?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Submit Appointment',
                    cancelButtonText: 'Save as Draft',
                }).then((result) => {
                    if (!result.isConfirmed) {
                      // Simpan sebagai draft
                      sendRequest(apiurl + "/" + modname, "POST", {
                        requestStatus: 0,
                        text: appointmentData.text,
                        description: appointmentData.description,
                        startDate: appointmentData.startDate,
                        endDate: appointmentData.endDate,
                        ghm_room_id: appointmentData.ghm_room_id,
                        employee_id: appointmentData.employee_id,
                        guest: appointmentData.guest,
                        family: appointmentData.family
                    }).then(response => {
                          if (response.status === 'success') {
                            Swal.fire({
                              icon: 'success',
                              title: 'Saved as Draft',
                              text: 'Appointment has been saved as draft.',
                            });
                            e.component._dataSource.reload();
                          } else {
                            Swal.fire({
                              icon: 'error',
                              title: 'Error',
                              text: response.message,
                            });
                          }
                        })
                        .catch(error => {
                            Swal.fire({
                              icon: 'error',
                              title: 'Error',
                              text: error.responseText,
                            });
                          });
                        }
                    });
                  };
                }
          
            popup.option('toolbarItems', toolbarItems);
              
                const form = e.form;
                // const appointmentData = e.appointmentData;
                // const isNewAppointment = !appointmentData.id;
    
                console.log('Appointment Data:', appointmentData); // Debug log
    
                if (appointmentData.employee_id && typeof appointmentData.employee_id === 'string') {
                    appointmentData.employee_id = deserializeFromJSON(appointmentData.employee_id);
                }
                if (appointmentData.guest && typeof appointmentData.guest === 'string') {
                    // console.log(appointmentData.guest)
                    appointmentData.guest = deserializeFromJSON(appointmentData.guest);
                    // console.log(appointmentData.guest)
                } else if (!appointmentData.guest) {
                    appointmentData.guest = []; // Inisialisasi dengan string kosong jika nilai `guest` adalah `null` atau `undefined`
                }
                if (appointmentData.family && typeof appointmentData.family === 'string') {
                    // console.log(appointmentData.family)
                    appointmentData.family = deserializeFromJSON(appointmentData.family);
                    // console.log(appointmentData.family)
                } else if (!appointmentData.family) {
                    appointmentData.family = []; // Inisialisasi dengan string kosong jika nilai `family` adalah `null` atau `undefined`
                }
    
                function validateBooking() {
                    let guestCount = (form.getEditor("guest")?.option("value") || []).length;
                    let familyCount = (form.getEditor("family")?.option("value") || []).length;
                    let employeeCount = (form.getEditor("employee_id")?.option("value") || []).length;
    
                    let totalGuests = guestCount + familyCount + employeeCount;
                    console.log("total guest",totalGuests);
                    let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
                    // let roomAccupancy = room?.roomAccupancy || 0;
                    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomAccupancy || 0;
                    console.log("total Kaps",roomCapacity);
            
                    let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");
            
                    if (totalGuests > roomCapacity) {
                        // doneButton.addClass("dx-state-disabled");
                        DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
                    // } else { 
                        // doneButton.removeClass("dx-state-disabled");
                    }
                }
            
            form.option('items', [                
                {
