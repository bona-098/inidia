onAppointmentFormOpening: async function (e) {
    console.log("onAppointmentFormOpening triggered");
    const form = e.form;
    const appointmentData = e.appointmentData;
    let reqid = appointmentData.id;

    if (!reqid) {
        let cellData = e.cellData || {};
        let ghm_room_id = cellData.ghm_room_id || appointmentData.ghm_room_id;
        let startDate = cellData.startDate || appointmentData.startDate;
        let endDate = cellData.endDate || appointmentData.endDate;

        if (ghm_room_id && startDate && endDate) {
            try {
                const response = await sendRequest(apiurl + "/" + modname, "POST", {
                    requestStatus: 0, 
                    ghm_room_id: ghm_room_id,
                    startDate: startDate,
                    endDate: endDate,
                    employee: cellData.employee || appointmentData.employee || [],
                    guest: cellData.guest || appointmentData.guest || [],
                    family: cellData.family || appointmentData.family || []
                });

                if (response.status === 'success') {
                    reqid = response.data.id;
                    appointmentData.id = reqid;
                    appointmentData.isAutoPost = true;  // Tambahkan flag
                    
                    console.log("Before updateAppointment (isAutoPost = true):", appointmentData);

                    e.component.updateAppointment(appointmentData, { id: reqid });

                    console.log("After updateAppointment:", e.component.option("dataSource"));

                    form.option("formData", appointmentData);
                    form.repaint();
                } else {
                    DevExpress.ui.notify("Failed to retrieve ID!", "error", 3000);
                }
            } catch (error) {
                console.error("Error during Auto Post:", error);
            }
        } else {
            console.error("Required data is missing for Auto Post");
        }
    }

    console.log("Final Appointment Data Before Submit:", appointmentData);
}
==============
onAppointmentUpdating: async function (e) {
    console.log("onAppointmentUpdating triggered");
    console.log("e.newData:", JSON.stringify(e.newData));
    console.log("e.oldData:", JSON.stringify(e.oldData));

    const appointmentData = e.newData;
    const oldAppointmentData = e.oldData;
    const currentStatus = oldAppointmentData.requestStatus;

    // **Pastikan isAutoPost tidak hilang**
    if (typeof appointmentData.isAutoPost === "undefined") {
        appointmentData.isAutoPost = oldAppointmentData.isAutoPost || false;
    }

    console.log("isAutoPost in onAppointmentUpdating:", appointmentData.isAutoPost);

    if (![0, 2, "0", null, 'undefined'].includes(currentStatus) && !appointmentData.isAutoPost) {
        console.log("Update Rejected - Invalid Status");
        DevExpress.ui.notify({
            type: "error",
            displayTime: 3000,
            contentTemplate: (e) => {
                e.append(`
                    <div style="white-space: pre-line;">
                        Action Rejected!\n
                        Tidak diizinkan melakukan perubahan saat ini!\n
                    </div>
                `);
            }
        });
        e.cancel = true;
        return;
    }

    console.log("Update Allowed - Proceeding...");
}
