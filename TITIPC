<?php

namespace App\Http\Controllers\Submission;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Mail;
use App\Models\Submission\Ghm;
use App\Models\Ghm_room;
use App\Models\location;
use App\Models\code;
use App\Models\ApproverListReq;
use App\Models\ApproverListHistory;
use App\Models\Approvaluser;
use App\Models\Module;
use App\Models\User;
use App\Models\Employee;
use App\Models\Assignmentto;
use App\Models\Attachment;
use DB;
use Illuminate\Support\Facades\Log;
use App\Mail\SubmissionMail;
use App\Models\Department;

class GhmRequestController extends Controller
{
    public $model;
    public $modulename;
    public $module;

    public function __construct()
    {
        $this->model = new Ghm();
        $this->modulename = 'Ghm';
        $this->module = new Module();
    }
  // GHM Booking - Scheduler
    public function dashboard(Request $request)
    {
        $user = auth()->user();
        if (!$user) {
            return redirect()->route('login');
        }
        $userId = $user->id;
        \Log::info('Logged-in user_id: '.$userId);
        $isAdmin = $user->isAdmin ?? false;
        $module_id = $this->getModuleId($this->modulename);
        $employeeId = $user->employee_id ?? null;
        $gethrslQuery = "(select TOP 1 CASE WHEN a.user_id='".$userId."' then 1 else 0 end 
            from tbl_approverListReq l
            left join tbl_approver a on l.approver_id=a.id
            left join tbl_approvaltype r on a.approvaltype_id = r.id 
            where l.req_id = request_ghm.id and l.module_id = '".$module_id."' and r.ApprovalType='HR Service Leader' and r.isactive='1'
            order by a.sequence)";

        $requests = Ghm::query()
            ->where(function ($query) use ($userId, $isAdmin, $gethrslQuery) {
                if ($isAdmin) {
                    $query->where("request_ghm.user_id", "!=", $userId)
                        ->whereIn("request_ghm.requestStatus", [1, 3, 4]);
                } else {
                    $query->whereRaw("$gethrslQuery = 1", [])
                        ->whereIn("request_ghm.requestStatus", [1, 2, 3, 4])
                        ->orWhere(function ($q) use ($userId) {
                            $q->where("request_ghm.user_id", "=", $userId)
                            ->orWhere("request_ghm.requestStatus", 3);
                        });
                }
            })
            ->with(['User', 'code', 'ghm_room'])
            ->get();

        $rooms = Ghm_room::all();
        $locations = Location::all();
        $employees = Employee::with('Department')->get();
        $departments = Department::all();
        $statusColors = [
            0 => '#6C757D', // Draft (Abu)6C757D-ECEFF1
            1 => '#007BFF', // Pending (Biru)007BFF-81D4FA
            2 => '#FFC107', // Approved (Kuning)FFC107-FFF59D
            3 => '#28A745', // Rejected (Hijau)28A745-C8E6C9
            4 => '#DC3545', // Completed (Merah)DC3545-FFCDD2
        ];        
        $totalPeopleData = DB::select("
            SELECT 
                request_ghm.id,
                COALESCE(SUM(EmployeeCount), 0) AS totalEmployee,
                COALESCE(SUM(GuestCount), 0) AS totalGuest,
                COALESCE(SUM(FamilyCount), 0) AS totalFamily,
                COALESCE(SUM(EmployeeCount + GuestCount + FamilyCount), 0) AS totalAll
            FROM 
                [request_ghm]
            CROSS APPLY (SELECT COUNT(*) AS EmployeeCount FROM OPENJSON(employee)) AS EmpData
            CROSS APPLY (SELECT COUNT(*) AS GuestCount FROM OPENJSON(guest)) AS GuestData
            CROSS APPLY (SELECT COUNT(*) AS FamilyCount FROM OPENJSON(family)) AS FamilyData    
            WHERE requestStatus = 3
            GROUP BY request_ghm.id, request_ghm.ghm_room_id, request_ghm.startDate, request_ghm.endDate
            ");            
            $totalPeopleArray = collect($totalPeopleData)->mapWithKeys(function ($item) {
                return [$item->id => $item->totalAll];
            });        
        if ($requests->isEmpty()) {
            $booking = [];
        } else {
            $booking = $requests->map(function ($request) use ($rooms, $locations, $totalPeopleArray, $statusColors, $userId) {
                $room = $rooms->firstWhere('id', $request->ghm_room_id);
                $location = $room ? $locations->firstWhere('id', $room->location_id) : null;
                $totalPeople = $totalPeopleArray[$request->id] ?? 0;
                $isMine = $request->user_id === $userId ? 1 : 0;
                \Log::info('Checking Booking.user_id: '.$request->user_id.' against Logged-in user_id: '.$userId); // Debugging nilai user_id dan userId
                \Log::info('Booking.user_id: '.$request->user_id.' isMine: '.$isMine.' Logged-in user_id: '.$userId); // Debugging nilai use
                return [
                    'id' => $request->id,
                    'bu' => $request->bu,
                    'sector' => $request->sector,
                    'text' => $request->text ?? '',
                    'guest' => $request->guest ?? 0,
                    'family' => $request->family ?? 0,
                    'employee' => $request->employee ?? null,
                    'description' => $request->description ?? '',
                    'requestStatus' => $request->requestStatus ?? 0,
                    'startDate' => optional($request->startDate)->toIso8601String(),
                    'endDate' => optional($request->endDate)->toIso8601String(),
                    'code' => optional($request->code)->code ?? null,
                    'creator' => optional($request->User)->fullname ?? null,
                    'ghm_room_id' => $request->ghm_room_id,
                    'roomName' => optional($room)->roomName ?? null,
                    'location' => optional($location)->Location ?? null,
                    'totalPeople' => $totalPeople,
                    'requestColor' => isset($statusColors[$request->requestStatus]) ? $statusColors[$request->requestStatus] : '#6C757D',
                    'isMine' => $isMine
                ];
            });
        }
        $roomsWithLocations = $rooms->map(function ($room) use ($locations) {
            $location = $locations->firstWhere('id', optional($room)->location_id);
            return [
                'text' => optional($room)->roomName ?? 'N/A',
                'id' => optional($room)->id ?? null,
                'bu' => optional($room)->bu ?? null,
                'sector' => optional($room)->sector ?? null,
                'roomOccupancy' => optional($room)->roomOccupancy ?? 0,
                'location' => optional($location)->Location ?? 'N/A',
                'roomColor' => '#F0F0F0',
            ];
        });
        $uniqueLocations = $roomsWithLocations->pluck('location')->unique()->values();
        if ($request->ajax()) {
            return response()->json([
                'booking' => $booking,
                'roomsWithLocations' => $roomsWithLocations
            ]);
        }
        return view('dashboard.ghm_booking', [
            'booking' => $booking,
            'roomsWithLocations' => $roomsWithLocations,
            'uniqueLocations' => $uniqueLocations,
            'emplo' => $employees,
            'departments' => $departments,
        ]);
    }
    // GHM Request - list Booking
    public function index(Request $request)
    {
        try {
            $id = $request->id;
            $user_id = $this->getAuth()->id;
            $employeeid = $this->getEmployeeID()->id;
            $module_id = $this->getModuleId($this->modulename);
            $isAdmin = $this->getAuth()->isAdmin;
            $requestData = $request->all();
            $dataquery = $this->model->query();
            $subquery = "(select TOP 1 
                CASE WHEN a.user_id='".$user_id."' 
                then 1 else 0 end 
                from tbl_approverListReq l
                left join tbl_approver a on l.approver_id=a.id
                left join tbl_approvaltype r on a.approvaltype_id = r.id 
                where l.ApprovalAction='1' 
                and l.req_id = request_ghm.id and l.module_id = '".$module_id."' 
                and request_ghm.requestStatus='1'
                order by a.sequence)";     
               
                $gethrsl = "(select TOP 1 CASE WHEN a.user_id='".$user_id."'  then 1 else 0 end 
            from tbl_approverListReq l
            left join tbl_approver a on l.approver_id=a.id
            left join tbl_approvaltype r on a.approvaltype_id = r.id 
            where l.req_id = request_ghm.id and l.module_id = '".$module_id."' and r.ApprovalType='HR Service Leader' and r.isactive='1'
            order by a.sequence)";

            if(!$isAdmin) {
                $dataquery->leftJoin('tbl_assignment',function($join) use ( $user_id, $module_id){
                    $join->on('request_ghm.id','=','tbl_assignment.req_id')
                        ->where("request_ghm.user_id", "!=", $user_id)
                        ->where('tbl_assignment.module_id',$module_id);
                });
            }
            $data = $dataquery
                ->selectRaw("request_ghm.id,
                codes.code, 
                request_ghm.user_id,
                request_ghm.description,
                request_ghm_room.roomName,
                request_ghm_room.bu,
                request_ghm_room.sector,
                request_ghm.ghm_room_id,            
                request_ghm.text,
                request_ghm.description,
                request_ghm.requestStatus,
                request_ghm.startDate,
                request_ghm.endDate,
                request_ghm.created_at,
                request_ghm.updated_at,
                (SELECT STRING_AGG(emp.fullname, ', ')
                FROM OPENJSON(request_ghm.employee) 
                WITH (employee_id INT '$')
                LEFT JOIN employee.tbl_employee AS emp
                ON emp.id = employee_id
                ) AS employee_fullname,
                COALESCE(request_ghm.guest, '[]') AS guest,
                COALESCE(request_ghm.family, '[]') AS family,
                employee.tbl_location.Location, 
                    CASE WHEN request_ghm.user_id='".$user_id."' then 1 else 0 end as isMine,
                    ".$subquery." as isPendingOnMe,
                    ".$gethrsl." as isHrsl
                ")
                ->leftJoin('codes', 'request_ghm.code_id', '=', 'codes.id')
                ->leftJoin('request_ghm_room', 'request_ghm.ghm_room_id', '=', 'request_ghm_room.id')
                ->leftJoin('employee.tbl_location', 'request_ghm_room.location_id', '=', 'employee.tbl_location.id')
                ->with(['user', 'approverlist'])
                ->where(function ($query) use ($subquery, $user_id, $isAdmin, $employeeid, $module_id) {
                    $query->whereRaw($subquery . " = 1")
                        ->orWhere(function ($query) use ($user_id, $isAdmin, $employeeid, $module_id) {
                            if ($isAdmin) {
                                $query->where("request_ghm.user_id", "!=", $user_id)
                                    ->whereIn("request_ghm.requestStatus", [1,3,4]);
                            }
                             else {
                                $query->where("request_ghm.user_id", "!=", $user_id)
                                ->whereIn("request_ghm.requestStatus", [3]);
                                // ->where("bu",$this->getEmployeeID()->companycode);                        
                            }
                        })
                        ->orWhere("request_ghm.user_id", $user_id);
                })
                ->orderBy(DB::raw($subquery), 'DESC')
                ->orderByRaw("CASE WHEN request_ghm.user_id = '".$user_id."' THEN 0 ELSE 1 END, request_ghm.created_at desc")
                ->get();
                $data->transform(function ($item) {
                    if (is_array($item->guest)) {
                        $item->guest = implode(', ', $item->guest);
                    }
                    if (is_array($item->family)) {
                        $item->family = implode(', ', $item->family);
                    }                
                    return $item;
                });
            return response()->json([
                'status' => "show",
                'message' => $this->getMessage()['show'],
                'data' => $data,
            ])->setEncodingOptions(JSON_NUMERIC_CHECK);
        } catch (\Exception $e) {
            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }

    // GHM Reqeust - Action Modal
    
    public function checkattachmentghm(Request $request)
    {
        try {
            $hasKTP = false;
            $hasKK = false;
            $hasSD = false;

            if ($request->countfamily > 0 ) {
                $data = DB::table('tbl_attachment')
                    ->where('req_id', $request->req_id)
                    ->where('module_id', $this->getModuleId($request->modelname))
                    ->where(function($query) {
                        $query->where('remarks', 'like', 'KTP')
                              ->orWhere('remarks', 'like', 'KK');
                    })
                    ->get();
                    foreach ($data as $attc) {
                        // $countattfamily = ?
                        if ($attc->remarks === 'KTP') {
                            // if($request->countfamily == $countattfamily) {
                            //     $hasKTP = true;
                            // }
                            $hasKTP = true;
                        }
                        if ($attc->remarks === 'KK') {
                            $hasKK = true;
                        }
                    }
        
                    if (!$hasKTP) {
                        return response()->json(["status" => "error", "message" => "Error: Supporting document 'KTP' is required. Please attach it."]);
                    }
        
                    if (!$hasKK) {
                        return response()->json(["status" => "error", "message" => "Error: Supporting document 'KK' is required. Please attach it."]);
                    }
            } else if($request->countguest > 0) {                
                $data = DB::table('tbl_attachment')
                    ->where('req_id', $request->req_id)
                    ->where('module_id', $this->getModuleId($request->modelname))
                    ->where(function($query) {
                        $query->where('remarks', 'like', 'Supporting Document');                         
                    })
                    ->get();
                    // $message = "Supporting document is required!";
                    foreach ($data as $attc) {
                        // $countattfamily = ?
                      
                        if ($attc->remarks === 'Supporting Document') {
                            $hasSD = true;
                        }
                    }
        
                    if (!$hasSD) {
                        return response()->json(["status" => "error", "message" => "Error: Supporting document 'Supporting Document' is required. Please attach it."]);
                    }
            }
            if (count($data) > 0) {
                return response()->json(["status" => "success"]);
            }
        } catch (\Exception $e) {

            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        } 
    }
    public function show($id)
    {
        try {
            $dataquery = $this->model->query();

            // Ambil data utama booking berdasarkan ID
            $data = $dataquery
                ->selectRaw("
                    request_ghm.id,
                    codes.code, 
                    request_ghm.user_id,
                    request_ghm.description,
                    request_ghm.ghm_room_id,   
                    request_ghm_room.bu,
                    request_ghm_room.sector,          
                    request_ghm.text,
                    request_ghm.requestStatus,
                    request_ghm.startDate,
                    request_ghm.endDate,
                    request_ghm.created_at,
                    request_ghm.updated_at,
                    COALESCE(request_ghm.guest, '[]') AS guest,
                    COALESCE(request_ghm.family, '[]') AS family,
                    request_ghm_room.location_id, 
                    employee.tbl_location.Location,
                    (SELECT STRING_AGG(emp.fullname, ', ')
                    FROM OPENJSON(request_ghm.employee) 
                    WITH (employee_id INT '$')
                    LEFT JOIN employee.tbl_employee AS emp
                    ON emp.id = employee_id
                    ) AS employee_fullname
                ")
                ->leftJoin('codes', 'request_ghm.code_id', '=', 'codes.id')
                ->leftJoin('request_ghm_room', 'request_ghm.ghm_room_id', '=', 'request_ghm_room.id')
                ->leftJoin('employee.tbl_location', 'request_ghm_room.location_id', '=', 'employee.tbl_location.id')
                ->where('request_ghm.id', $id)
                ->first();

            if (!$data) {
                return response()->json(["status" => "error", "message" => "Data tidak ditemukan"]);
            }

            // Jika code_id null, generate dan simpan code baru
            if ($data->code_id == null) {
                $data->code_id = $this->generateCode($this->modulename);
                $data->save();
            }

            // Pastikan guest dan family dalam bentuk array
            $data->guest = is_string($data->guest) ? json_decode($data->guest, true) : (array) $data->guest;
            $data->family = is_string($data->family) ? json_decode($data->family, true) : (array) $data->family;

            // Cek booking yang mengalami overlapping
            $overlappingBookings = $this->model->query()
                ->selectRaw("
                    request_ghm.id,
                    request_ghm.description,
                    request_ghm_room.bu,
                    request_ghm.text,
                    request_ghm.ghm_room_id,
                    request_ghm.startDate,
                    request_ghm.endDate,
                    codes.code,
                    request_ghm_room.bu,
                    request_ghm_room.sector,
                    request_ghm.created_at,
                    (SELECT STRING_AGG(emp.fullname, ', ')
                    FROM OPENJSON(request_ghm.employee) 
                    WITH (employee_id INT '$')
                    LEFT JOIN employee.tbl_employee AS emp
                    ON emp.id = employee_id
                    ) AS employee_fullname,
                    COALESCE(request_ghm.guest, '[]') AS guest,
                    COALESCE(request_ghm.family, '[]') AS family
                ")
                ->leftJoin('codes', 'request_ghm.code_id', '=', 'codes.id')
                ->leftJoin('request_ghm_room', 'request_ghm.ghm_room_id', '=', 'request_ghm_room.id')
                ->where('request_ghm.ghm_room_id', $data->ghm_room_id)
                ->where('request_ghm.requestStatus', 3)
                ->where('request_ghm.id', '!=', $data->id)
                ->where('request_ghm.startDate', '<=', $data->endDate)
                ->where('request_ghm.endDate', '>=', $data->startDate)
                ->get();

            // Format hasil overlapping booking
            $overlappingData = $overlappingBookings->map(function ($booking) {
                return [
                    'code' => $booking->code,
                    'bu' => $booking->bu,
                    'sector' => $booking->sector,
                    'ghm_room_id' => $booking->ghm_room_id,
                    'description' => $booking->description,
                    'text' => $booking->text,
                    'startDate' => $booking->startDate,
                    'endDate' => $booking->endDate,
                    'created_at' => $booking->created_at,
                    'guest' => is_string($booking->guest) ? json_decode($booking->guest, true) : (array) $booking->guest,
                    'employee_fullname' => $booking->employee_fullname, // Ensure employee_fullname is included
                    'family' => is_string($booking->family) ? json_decode($booking->family, true) : (array) $booking->family
                ];
            });

            // Masukkan overlappingData ke dalam data
            $data->overlappingData = $overlappingData;

            return response()->json([
                'status' => "show",
                'message' => "The data is being displayed.",
                'data' => $data
            ])->setEncodingOptions(JSON_NUMERIC_CHECK);

        } catch (\Exception $e) {
            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }

    /////////// STORE GHM Request & GHM Booking \\\\\\\\\\\\\\\\\\\\\
    public function store(Request $request)
    {
        try {
            // Ambil semua data dari request
            $employee = $this->getEmployeeID();

            $requestData = $request->all();

            // Tambahkan user_id ke dalam data request
            $requestData['user_id'] = $this->getAuth()->id;
            $requestData['employee_id'] = $employee->id;
            // $requestData['requestStatus'] = 0;
            $requestData['code_id'] = $this->generateCode($this->modulename);

            if ($employee->companycode === 'KPSI') {
                $employee->companycode = 'IHM';
            }

            $requestData['bu'] = $employee->companycode;
            // Buat data baru pada tabel utama
            $newData = $this->model->create($requestData);

            // Simpan id dari data baru
            $req_id = $newData->id;           
           

            // $this->createApprover($this->modulename, $req_id, null, null);
            
            return response()->json([
                "status" => "success",
                "message" => $this->getMessage()['store'],
                "data" => $newData
            ]);

        } catch (\Exception $e) {

            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }

    /////////////// GHM Booking & Request UPDATE \\\\\\\\\\\\\\\\\\\\
    public function update(Request $request, $id)
    {
        try {

            // Mengambil semua data dari request
            $requestData = $request->all();
            
            // Mencari data berdasarkan id dan mengupdate data dengan nilai dari $requestData
            // $this->addOneDayToDate($requestData);

            $data = $this->model->findOrFail($id);
            $data->update($requestData);

            // Mengembalikan data dalam bentuk JSON dengan memberikan status, pesan dan data
            return response()->json([
                'status' => "success",
                'message' => $this->getMessage()['update']
            ]);

        } catch (\Exception $e) {

            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }

    ///////////////////// GHM Request & Booking Delete \\\\\\\\\\\\\\\\\\\
    public function destroy($id)
    {
        try {
            $module = $this->module->select('id', 'module')->where('module', $this->modulename)->first();
            $user_id = $this->getAuth()->id;
            if ($module) {
                DB::transaction(function () use ($id, $module, $user_id) {
                    ApproverListReq::where('req_id', $id)
                        ->where('module_id', $module->id)
                        ->delete();
                    ApproverListHistory::where('req_id', $id)
                        ->where('module_id', $module->id)
                        ->delete();
                    $data = $this->model->where('id',$id)->where('requestStatus',0)->where('user_id',$user_id)->first();
                    if ($data) {
                        $data->delete();
                    } else {
                        throw new \Exception($this->getMessage()['errordestroysubmission']);
                    }
                });
                return  response()->json(["status" => "success", "message" => $this->getMessage()['destroy']]);
            } else {
                return  response()->json(["status" => "error", "message" => $this->getMessage()['modulenotfound']]);
            }
        } catch (\Exception $e) {
            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }


    // auto approval
    public function ghmautoapproved()
    {

        DB::beginTransaction();

        $dataGhm = DB::table('ghmWaitingApproval')
            ->where('days_left',0)
            ->get();


        if(count($dataGhm) > 0) {
            foreach ($dataGhm as $value) {
                // Update the record in the database
                $reqGhm = DB::table('request_ghm')
                ->where('id', $value->ghm_id)
                ->update([
                    'requestStatus' => 3 // full approved
                ]);

                $reqGhmAppr = DB::table('tbl_approverListReq')
                ->where('req_id', $value->ghm_id)
                ->where('module_id',$this->getModuleId('Ghm'))
                ->update([
                    'approvalDate' => Carbon::now(), // approved action
                    'approvalAction' => 3 // approved action
                ]);
            }
        }
        
        DB::commit();
        // Check if the update was successful
        return response()->json([
            'status' => "success",
            'message' => "Record updated successfully",
        ]);
    }
}
