VM1195:1 
 Uncaught SyntaxError: Unexpected token 'w', "wq" is not valid JSON
    at JSON.parse (<anonymous>)
    at deserializeFromJSON (ghm_booking.js:13:17)
    at i.onAppointmentFormOpening (ghm_booking.js:435:41)
    at Object.execute (dx.all.js:9:47094)
    at e._executeAction (dx.all.js:9:46215)
    at e.execute (dx.all.js:9:45833)
    at i.<anonymous> (dx.all.js:9:54322)
    at s (dx.all.js:9:55017)
    at e._onShowing (dx.all.js:9:3144205)
    at t.onShowing (dx.all.js:9:3143915)
===================================================================
onAppointmentFormOpening: function(e) {
            const form = e.form;
            const appointmentData = e.appointmentData;
            // const isNewAppointment = !appointmentData.id;

            console.log('Appointment Data:', appointmentData); // Debug log

            if (appointmentData.employee_id && typeof appointmentData.employee_id === 'string') {
                appointmentData.employee_id = deserializeFromJSON(appointmentData.employee_id);
            }
            if (appointmentData.guest && typeof appointmentData.guest === 'string') {
                // console.log(appointmentData.guest)
                appointmentData.guest = deserializeFromJSON(appointmentData.guest);
                // console.log(appointmentData.guest)
            } else if (!appointmentData.guest) {
                appointmentData.guest = []; // Inisialisasi dengan string kosong jika nilai `guest` adalah `null` atau `undefined`
            }
            if (appointmentData.family && typeof appointmentData.family === 'string') {
                // console.log(appointmentData.family)
                appointmentData.family = deserializeFromJSON(appointmentData.family);
                // console.log(appointmentData.family)
            } else if (!appointmentData.family) {
                appointmentData.family = []; // Inisialisasi dengan string kosong jika nilai `family` adalah `null` atau `undefined`
            }

            function validateBooking() {
                let guestCount = (form.getEditor("guest")?.option("value") || []).length;
                let familyCount = (form.getEditor("family")?.option("value") || []).length;
                let employeeCount = (form.getEditor("employee_id")?.option("value") || []).length;

                let totalGuests = guestCount + familyCount + employeeCount;
                console.log("total guest",totalGuests);
                let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
                // let roomAccupancy = room?.roomAccupancy || 0;
                let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomAccupancy || 0;
                console.log("total Kaps",roomCapacity);
        
                let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");
        
                if (totalGuests > roomCapacity) {
                    // doneButton.addClass("dx-state-disabled");
                    DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
                // } else { 
                    // doneButton.removeClass("dx-state-disabled");
                }
            }
{
form.option('items', [    
                    itemType: 'group',
                    colSpan: 2,
                    caption: 'Guest Type',
                    items: [
                        {                                
                            title: 'Employee',
                            label: { text: 'Employee' },
                            editorType: 'dxTagBox',
                            dataField: 'employee_id',
                            editorOptions: {                                                
                                dataSource: emplo,
                                displayExpr: function(item) {
                                    if (!item) return "";
                                    const department = departments.find(dept => dept.id === item.department_id);
                                    return `${item.FullName} | ${item.SAPID} | ${department ? department.DepartmentName : "Failed"}`;                                    
                                },
                                valueExpr: 'id',
                                value: Array.isArray (appointmentData.employee_id) ? appointmentData.employee_id : [],
                                showSelectionControls: true,
                                applyValueMode: 'useButtons',
                                searchEnabled: true,
                                onValueChanged: validateBooking
                            }                            
                        },
                        {                                        
                            title: 'Guest',
                            editorType: 'dxTagBox',
                            dataField: 'guest',
                            editorOptions: {
                                dataSource: [],
                                value: Array.isArray(appointmentData.guest) ? appointmentData.guest : [],
                                acceptCustomValue: true,
                                searchEnabled: true,
                                showSelectionControls: true,
                                applyValueMode: 'useButtons',
                                onCustomItemCreating: function(args) {
                                    let newValue = args.text;
                                    let guests = form.option('formData').guest || [];
                                    if (!guests.includes(newValue)) {
                                        guests.push(newValue);
                                        args.customItem = newValue;
                                    } else {
                                        args.customItem = null;
                                    }
                                    // appointmentData.guest = guests;
                                    // let newFormData = { ...form.option('fromData'), guest: newGuestList } ;
                                    // form.option('formData', newFormData);
                                    form.updateData('guest', guests);
                                    validateBooking();
                                    // form.repaint();
                                }
                            }
                        },                            
                        {
                            title: 'Family',
                            editorType: 'dxTagBox',
                            dataField: 'family',
                            editorOptions: {
                                dataSource: [],
                                value: Array.isArray(appointmentData.family) ? appointmentData.family : [],
                                acceptCustomValue: true,
                                searchEnabled: true,
                                showSelectionControls: true,
                                applyValueMode: 'useButtons',
                                onCustomItemCreating: function(args) {
                                    let newValue = args.text;
                                    let familys = form.option('formData').family || [];
                                    if (!familys.includes(newValue)) {
                                        familys.push(newValue);
                                        args.customItem = newValue;
                                    } else {
                                        args.customItem = null;
                                    }
                                    // appointmentData.family = familys;
                                    // let newFormData = { ...form.option('fromData'), guest: newGuestList } ;
                                    // form.option('formData', newFormData);
                                    form.updateData('family', familys);
                                    // form.repaint();
                                    validateBooking();
                                }
                            }
                        } 
                    ]
                }                                       
            ]);

            // setTimeout(validateBooking,100);
        },
