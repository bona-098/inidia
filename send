public function index(Request $request)
{
    try {            
        $id = $request->id;
        $user_id = $this->getAuth()->id;
        $employeeid = $this->getEmployeeID()->id;
        $module_id = $this->getModuleId($this->modulename);
        $isAdmin = $this->getAuth()->isAdmin;
        $requestData = $request->all();

        $statusColors = [
            0 => '#6C757D', // Draft
            1 => '#007BFF', // Pending
            2 => '#FFC107', // Approved
            3 => '#28A745', // Rejected
            4 => '#DC3545', // Completed
        ];

        $totalPeopleData = DB::select("
            SELECT 
                request_ghm.id,
                COALESCE(SUM(EmployeeCount), 0) AS totalEmployee,
                COALESCE(SUM(GuestCount), 0) AS totalGuest,
                COALESCE(SUM(FamilyCount), 0) AS totalFamily,
                COALESCE(SUM(EmployeeCount + GuestCount + FamilyCount), 0) AS totalAll
            FROM 
                [request_ghm]
            CROSS APPLY (SELECT COUNT(*) AS EmployeeCount FROM OPENJSON(employee)) AS EmpData
            CROSS APPLY (SELECT COUNT(*) AS GuestCount FROM OPENJSON(guest)) AS GuestData
            CROSS APPLY (SELECT COUNT(*) AS FamilyCount FROM OPENJSON(family)) AS FamilyData
            GROUP BY id
        ");    

        $totalPeopleArray = collect($totalPeopleData)->mapWithKeys(function ($item) {
            return [$item->id => $item->totalAll];
        });

        $dataquery = $this->model->query();

        if (!$isAdmin) {
            $dataquery->leftJoin('tbl_assignment', function($join) use ($user_id, $module_id) {
                $join->on('request_ghm.id', '=', 'tbl_assignment.req_id')
                    ->where("request_ghm.user_id", "!=", $user_id)
                    ->where('tbl_assignment.module_id', $module_id);
            });
        }

        $data = $dataquery->selectRaw("request_ghm.id, request_ghm.requestStatus")
            ->get();

        $data->transform(function ($request) use ($totalPeopleArray, $statusColors) {
            $request->totalPeople = $totalPeopleArray[$request->id] ?? 0;
            $request->requestColor = $statusColors[$request->requestStatus] ?? '#6C757D';
            return $request;
        });

        return response()->json([
            'status' => "show",
            'message' => $this->getMessage()['show'],
            'data' => $data,
        ])->setEncodingOptions(JSON_NUMERIC_CHECK);
    } catch (\Exception $e) {
        return response()->json(["status" => "error", "message" => $e->getMessage()]);
    }
}
