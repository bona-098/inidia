public function dashboard()
    {
        $user = auth()->user();
        if (!$user) {
            return redirect()->route('login');
        }
        $userId = $user->id;
        $isAdmin = $user->isAdmin ?? false;
        $employeeId = $user->employee_id ?? null;
        $requests = Ghm::query()
            ->where(function ($query) use ($userId, $isAdmin, $employeeId) {
                if ($isAdmin) {
                    $query->where("request_ghm.user_id", "!=", $userId)
                        ->whereIn("request_ghm.requestStatus", [1, 3, 4]);
                } else {
                    $query->whereIn("request_ghm.requestStatus", [3]);
                }
            })
            ->orWhere("request_ghm.user_id", $userId)
            ->with(['User', 'code', 'ghm_room'])
            ->get();
        $rooms = Ghm_room::all();
        $locations = Location::all();
        $employees = Employee::with('Department')->get();
        $departments = Department::all();
        $statusColors = [
            0 => '#6C757D', // Draft (Abu)6C757D-ECEFF1
            1 => '#007BFF', // Pending (Biru)007BFF-81D4FA
            2 => '#FFC107', // Approved (Kuning)FFC107-FFF59D
            3 => '#28A745', // Rejected (Hijau)28A745-C8E6C9
            4 => '#DC3545', // Completed (Merah)DC3545-FFCDD2
        ];        
        $totalPeopleData = DB::select("
            SELECT 
                request_ghm.id,
                COALESCE(SUM(EmployeeCount), 0) AS totalEmployee,
                COALESCE(SUM(GuestCount), 0) AS totalGuest,
                COALESCE(SUM(FamilyCount), 0) AS totalFamily,
                COALESCE(SUM(EmployeeCount + GuestCount + FamilyCount), 0) AS totalAll
            FROM 
                [request_ghm]
            CROSS APPLY (SELECT COUNT(*) AS EmployeeCount FROM OPENJSON(employee)) AS EmpData
            CROSS APPLY (SELECT COUNT(*) AS GuestCount FROM OPENJSON(guest)) AS GuestData
            CROSS APPLY (SELECT COUNT(*) AS FamilyCount FROM OPENJSON(family)) AS FamilyData
            GROUP BY id
            ");            
            // Konversi hasil query ke associative array dengan ID sebagai key
            $totalPeopleArray = collect($totalPeopleData)->mapWithKeys(function ($item) {
                return [$item->id => $item->totalAll];
            });
            // Konversi hasil query ke associative array dengan ID sebagai key
            $totalPeopleArray = collect($totalPeopleData)->mapWithKeys(function ($item) {
                return [$item->id => $item->totalAll];
            });            
        // Handle case when there are no bookings
        if ($requests->isEmpty()) {
            $booking = [];
        } else {
            $booking = $requests->map(function ($request) use ($rooms, $locations, $totalPeopleArray, $statusColors) {
                $room = $rooms->firstWhere('id', $request->ghm_room_id);
                $location = $room ? $locations->firstWhere('id', $room->location_id) : null;
                $totalPeople = $totalPeopleArray[$request->id] ?? 0;
                return [
                    'id' => $request->id,
                    'bu' => $request->bu,
                    'sector' => $request->sector,
                    'text' => $request->text ?? '',
                    'guest' => $request->guest ?? 0,
                    'family' => $request->family ?? 0,
                    'employee' => $request->employee ?? null,
                    'description' => $request->description ?? '',
                    'requestStatus' => $request->requestStatus ?? 0,
                    'startDate' => optional($request->startDate)->toIso8601String(),
                    'endDate' => optional($request->endDate)->toIso8601String(),
                    'code' => optional($request->code)->code ?? null,
                    'creator' => optional($request->User)->fullname ?? null,
                    'ghm_room_id' => $request->ghm_room_id,
                    'roomName' => optional($room)->roomName ?? null,
                    'location' => optional($location)->Location ?? null,
                    'totalPeople' => $totalPeople,
                    'requestColor' => isset($statusColors[$request->requestStatus]) ? $statusColors[$request->requestStatus] : '#6C757D', // Default warna abu-abu
                ];
            });
        }
        $roomsWithLocations = $rooms->map(function ($room) use ($locations) {
            $location = $locations->firstWhere('id', optional($room)->location_id);
            return [
                'text' => optional($room)->roomName ?? 'N/A',
                'id' => optional($room)->id ?? null,
                'bu' => optional($room)->bu ?? null,
                'sector' => optional($room)->sector ?? null,
                'roomOccupancy' => optional($room)->roomOccupancy ?? 0,
                'location' => optional($location)->Location ?? 'N/A',
                'roomColor' => '#F0F0F0', // Warna default untuk room, tidak dipengaruhi requestStatus
            ];
        });
        $uniqueLocations = $roomsWithLocations->pluck('location')->unique()->values();
        // dd($booking);
        return view('dashboard.ghm_booking', [
            'booking' => $booking,
            'roomsWithLocations' => $roomsWithLocations,
            'uniqueLocations' => $uniqueLocations,
            'emplo' => $employees,
            'departments' => $departments,
        ]);
    }
////////////// GHM Request - list Booking \\\\\\\\\\\\\\\\\\\\
    public function index(Request $request)
    {
        try {            
            $id = $request->id;
            $user_id = $this->getAuth()->id;
            $employeeid = $this->getEmployeeID()->id;
            $module_id = $this->getModuleId($this->modulename);
            $isAdmin = $this->getAuth()->isAdmin;
            $requestData = $request->all();

            $dataquery = $this->model->query();

            // $userId = $user_id;
            // $moduleId = $module_id;
            $subquery = "(select TOP 1 
                CASE WHEN a.user_id='".$user_id."' 
                then 1 else 0 end 
                from tbl_approverListReq l
                left join tbl_approver a on l.approver_id=a.id
                left join tbl_approvaltype r on a.approvaltype_id = r.id 
                where l.ApprovalAction='1' 
                and l.req_id = request_ghm.id and l.module_id = '".$module_id."' 
                and request_ghm.requestStatus='1'
                order by a.sequence)";

            if(!$isAdmin) {
                $dataquery->leftJoin('tbl_assignment',function($join) use ( $user_id, $module_id){
                    $join->on('request_ghm.id','=','tbl_assignment.req_id')
                        ->where("request_ghm.user_id", "!=", $user_id)
                        ->where('tbl_assignment.module_id',$module_id);
                });
            }
            $data = $dataquery
                ->selectRaw("request_ghm.id,
                codes.code, 
                request_ghm.user_id,
                request_ghm.description,
                request_ghm_room.roomName,
                request_ghm_room.bu,
                request_ghm_room.sector,
                request_ghm.ghm_room_id,            
                request_ghm.text,
                request_ghm.description,
                request_ghm.requestStatus,
                request_ghm.startDate,
                request_ghm.endDate,
                request_ghm.created_at,
                request_ghm.updated_at,
                (SELECT STRING_AGG(emp.fullname, ', ')
                FROM OPENJSON(request_ghm.employee) 
                WITH (employee_id INT '$')
                LEFT JOIN employee.tbl_employee AS emp
                ON emp.id = employee_id
                ) AS employee_fullname,
                (SELECT STRING_AGG(value, ', ') FROM OPENJSON(request_ghm.guest)) AS guest,
                (SELECT STRING_AGG(value, ', ') FROM OPENJSON(request_ghm.family)) AS family,
                request_ghm_room.location_id, 
                employee.tbl_location.Location, 
                    CASE WHEN request_ghm.user_id='".$user_id."' then 1 else 0 end as isMine,
                    ".$subquery." as isPendingOnMe
                ")
                ->leftJoin('codes', 'request_ghm.code_id', '=', 'codes.id')
                ->leftJoin('request_ghm_room', 'request_ghm.ghm_room_id', '=', 'request_ghm_room.id')
                ->leftJoin('employee.tbl_location', 'request_ghm_room.location_id', '=', 'employee.tbl_location.id')
                ->with(['user', 'approverlist'])
                ->where(function ($query) use ($subquery, $user_id, $isAdmin, $employeeid, $module_id) {
                    $query->whereRaw($subquery . " = 1")
                        ->orWhere(function ($query) use ($user_id, $isAdmin, $employeeid, $module_id) {
                            if ($isAdmin) {
                                $query->where("request_ghm.user_id", "!=", $user_id)
                                    ->whereIn("request_ghm.requestStatus", [1,3,4]);
                            }
                            //  else {
                            //     $query->whereIn("request_ghm.requestStatus", [3]);
                            // }
                        })
                        ->orWhere("request_ghm.user_id", $user_id);
                })
                ->orderBy(DB::raw($subquery), 'DESC')
                ->orderByRaw("CASE WHEN request_ghm.user_id = '".$user_id."' THEN 0 ELSE 1 END, request_ghm.created_at desc")
                ->get();
            return response()->json([
                'status' => "show",
                'message' => $this->getMessage()['show'],
                'data' => $data,
            ])->setEncodingOptions(JSON_NUMERIC_CHECK);
        } catch (\Exception $e) {
            return response()->json(["status" => "error", "message" => $e->getMessage()]);
        }
    }
