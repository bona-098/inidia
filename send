var modname = 'ghmrequest';
var modelclass = 'Ghm';
var popupmode;
var dataSubmitted = false; 
var schedulerInstance;
function serializeToJSON(employeeIds) {
    return JSON.stringify(employeeIds);
}
function deserializeFromJSON(jsonString) {
    return JSON.parse(jsonString);
}
$(function () {
    function submitFormData() {
        if (dataSubmitted) return;
        dataSubmitted = true;
        const formData = $('#booking-form').serializeArray();
        const employeeIdsField = formData.find(field => field.name === 'employee');
        const guestField = formData.find(field => field.name === 'guest');
        guestField.value = (guestField.value.split(',').map(name => name.trim()));
        const familyField = formData.find(field => field.name === 'family');
        familyField.value = serializeToJSON(familyField.value.split(',').map(name => name.trim()));
        sendRequest(apiurl + "/" + modname, "POST")
        .then(function (response) {
            if (response.status === 'success') {
                alert('Booking created successfully!');
                loadData();
            } else {
                alert('Error: ' + response.message);
            }
        }).catch(function (error) {
            alert('Error: ' + error.responseText);
        }).finally(function () {
            dataSubmitted = false;
        });
    }
    $('#booking-form').on('submit', function (event) {
        event.preventDefault();
        submitFormData();
    });
    $('#location-selector').dxSelectBox({
        dataSource: uniqueLocations,
        displayExpr: function (item) {
            return item || "";
        },
        valueExpr: function (item) {
            return item;
        },
        value: uniqueLocations[0],
        onValueChanged: function (e) {
            const selectedLocation = e.value;
            updateRoomSelector(selectedLocation);
        }
    });
    $("#btn-help").dxButton({
        icon: "help",
        onClick() {
            $("#popup-container").dxPopup("show");
        }
    });
    function loadData() {    
        schedulerInstance.option("dataSource", null);
        schedulerInstance.repaint();    
        fetch('ghm_booking', {
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(response => response.json())
        .then(response => {
            let data = response.booking;    
            console.log("Data Booking Loaded:", data);
            schedulerInstance.option("dataSource", data);
            schedulerInstance.repaint();
        })
        .catch(error => {
        });
    }    
    $("#btn-refresh").dxButton({
        icon: "refresh",
        onClick: function() {
            loadData();
        }
    });
    $("#popup-container").dxPopup({
        contentTemplate: function (contentElement) {
            var tableHtml = `
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr>
                            <th style="border: 1px solid #dddddd; padding: 8px; text-align: left;">Color</th>
                            <th style="border: 1px solid #dddddd; padding: 8px; text-align: left;">Status</th>
                            <th style="border: 1px solid #dddddd; padding: 8px; text-align: left;">Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="background-color: #6C757D; color: #fff; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Draft</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Your request has been saved as a draft</td>
                        </tr>
                        <tr>
                            <td style="background-color: #007BFF; color: #fff; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Pending</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Your request has been submitted and is awaiting approval</td>
                        </tr>
                        <tr>
                            <td style="background-color: #FFC107; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Rework</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Your request requires action</td>
                        </tr>
                        <tr>
                            <td style="background-color: #28A745; color: #fff; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Completed</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Your submission has been accepted</td>
                        </tr>
                        <tr>                    
                            <td style="background-color: #DC3545; color: #fff; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Rejected</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Your submission has been rejected by HR</td>
                        </tr>
                        <tr>                    
                            <td style="background-color: #DC3545; color: #fff; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Delete</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Delete Your submission</td>
                        </tr>
                        <tr>                    
                            <td style="background-color: #FFC107; color: #fff; border: 1px solid #dddddd; padding: 8px;"></td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Cancel</td>
                            <td style="border: 1px solid #dddddd; padding: 8px;">Cancel Your submission from pending</td>
                        </tr>
                        <!-- Tambahkan baris lain sesuai kebutuhan -->
                    </tbody>
                </table>
            `;
            contentElement.append(tableHtml);
        },
        width: 500,
        height: 400,
        showTitle: true,
        title: "Help",
        visible: false,
        dragEnabled: true,
        hideOnOutsideClick: true
    });
    function updateRoomSelector(location) {
        const filteredRooms = roomsWithLocations.filter(emp => emp.location === location);
        $('#room-selector').dxSelectBox({
            dataSource: filteredRooms,
            displayExpr: 'text',
            valueExpr: 'id',
            value: null,
            placeholder: 'Select Room',
            onValueChanged: function (e) {
                const selectedRoomId = e.value;
                updateScheduler(location, selectedRoomId);
            }
        });
        updateScheduler(location, null);
    }
    function isDateOverlap(start1, end1, start2, end2) {
        return (new Date(start1) <= new Date(end2)) && (new Date(start2) <= new Date(end1));
    }
    function safeArray(arr) {
        return Array.isArray(arr) ? arr : [];
    }
    function getTotalGuestsPerDay(scheduler, roomId, startDate, endDate) {
        let appointments = scheduler.getDataSource().items(); 
        let dailyGuestCount = {}; 
        appointments.forEach(appointment => {
            if (appointment.ghm_room_id === roomId) {
                let bookingStart = new Date(appointment.startDate);
                let bookingEnd = new Date(appointment.endDate);
                for (let d = new Date(bookingStart); d <= bookingEnd; d.setDate(d.getDate() + 1)) {
                    let dateKey = d.toISOString().split("T")[0]; // Format YYYY-MM-DD
                    let guestCount = safeArray(appointment.guest).length;
                    let familyCount = safeArray(appointment.family).length;
                    let employeeCount = safeArray(appointment.employee).length;
                    let totalGuests = guestCount + familyCount + employeeCount;
                    dailyGuestCount[dateKey] = (dailyGuestCount[dateKey] || 0) + totalGuests;
                }
            }
        });
        return dailyGuestCount;
    }
    function validateBooking(form) {
        let guestCount = safeArray(form.getEditor("guest")?.option("value")).length;
        let familyCount = safeArray(form.getEditor("family")?.option("value")).length;
        let employeeCount = safeArray(form.getEditor("employee")?.option("value")).length;
        let totalGuests = guestCount + familyCount + employeeCount;
        let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
        let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomOccupancy || 0;
        let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");
        if (totalGuests > roomCapacity) {
            DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
        }
        form.option("onValidated", function (e) {
            let guestCount = (form.getEditor("guest")?.option("value") || []).length;
            let familyCount = (form.getEditor("family")?.option("value") || []).length;
            let employeeCount = (form.getEditor("employee")?.option("value") || []).length;
            let totalGuests = guestCount + familyCount + employeeCount;
            if (totalGuests < 1) {
                e.isValid = false; // Mencegah submit
                DevExpress.ui.notify("Total guests harus lebih dari 0!", "error", 2000);
            }
        });
    }
    function getTotalGuestsForDateLocally(scheduler, roomId, checkDate) {
        let appointments = scheduler.getDataSource().items(); // Ambil semua booking yang ada
        let totalGuests = 0;
        console.log(`Mencari booking di kamar ${roomId} untuk tanggal ${checkDate}`);
        appointments.forEach(appointment => {
            let start = new Date(appointment.startDate);
            let end = new Date(appointment.endDate);
            let check = new Date(checkDate);
            console.log(`Booking Room ID: ${appointment.ghm_room_id}, Start: ${start}, End: ${end}`);
            if (appointment.ghm_room_id === roomId && check >= start && check <= end) {
                let guestCount = safeArray(appointment.guest).length;
                let familyCount = safeArray(appointment.family).length;
                let employeeCount = safeArray(appointment.employee).length;
                console.log(`✔️ Ditemukan booking dalam rentang tanggal: Guest=${guestCount}, Family=${familyCount}, Employee=${employeeCount}`);
                totalGuests += guestCount + familyCount + employeeCount;
            }
        });
        console.log(`Total tamu di kamar ${roomId} pada ${checkDate}: ${totalGuests}`);
        return totalGuests;
    }
    function isSameDate(date1, date2) {
        let d1 = new Date(date1);
        let d2 = new Date(date2);
        return d1.toDateString() === d2.toDateString();
    }
    function updateScheduler(location, roomId) {
        let dataSource = roomsWithLocations.filter(emp => emp.location === location);
        if (roomId) {
            dataSource = dataSource.filter(emp => emp.id === roomId);
        }
        console.log('Booking Data:', booking);

        $(document).ready(function () {
            schedulerInstance = $(".scheduler").dxScheduler({
                timeZone: 'Asia/Makassar',
                dataSource: booking,
                repaintChangesOnly: true,
                views: ['month'],
                currentView: 'month',
                currentDate: new Date(),
                firstDayOfWeek: 1,
                startDayHour: 10,
                endDayHour: 22,
                colorExpr: "color",
                showAllDayPanel: false,
                height: 710,
                groups: ['ghm_room_id'],
                resources: [
                    {
                        fieldExpr: 'ghm_room_id',
                        allowMultiple: false,
                        dataSource: dataSource,
                        label: 'Room Name',
                    },
                ],
                editing: {
                    refreshMode: 'reshape',
                    mode: 'cell',
                    allowAdding: true,
                    allowUpdating: true,
                    allowDeleting: true,
                },
                onAppointmentRendered: function (e) {
                    if (e.appointmentData.requestColor) {
                        e.appointmentElement.css("background-color", e.appointmentData.requestColor);
                        e.appointmentElement.css("color", "#fff"); // Kontras teks agar terlihat jelas
                    } else {
                        e.appointmentElement.css("background-color", "#6C757D"); // Default abu-abu jika warna tidak ditemukan
                    }
                },
                appointmentTooltipTemplate: function (model) {
                    const booking = model.appointmentData;
                    const room = roomsWithLocations.find(room => room.id === booking.ghm_room_id);
                    const roomOccupancy = room?.roomOccupancy || 0;
                    const guestCount = safeArray(booking.guest).length;
                    const familyCount = safeArray(booking.family).length;
                    const employeeCount = safeArray(booking.employee).length;
                    const totalPeople = guestCount + familyCount + employeeCount;
                    const remainingCapacity = roomOccupancy - totalPeople;
                    const formatDate = (date) => {
                        if (!date) return "No Date";
                        const d = new Date(date);
                        return isNaN(d.getTime()) ? "No Date" : d.toISOString().split("T")[0];
                    };
                    const actionButtonId = `action-btn-${booking.id}`;
                    const isCancelable = Number(booking.requestStatus) === 1 || Number(booking.requestStatus) === 2;
                    const buttonLabel = isCancelable ? "Cancel" : "Delete";
                    const buttonClass = isCancelable ? "btn-warning" : "btn-danger";
                    const tooltipHtml = `
                        <div>
                            <b>Purpose (Text): ${booking.text || "No Title"}</b><br>
                            ${formatDate(booking.startDate)} - ${formatDate(booking.endDate)}<br>
                            <b>Occupancy:</b> ${roomOccupancy} Person<br>
                            <b>Booked:</b> ${totalPeople} Person<br>
                            <b>Remaining:</b> ${remainingCapacity} Person<br>
                            <b>Created By:</b> ${booking.creator || "No Name"}<br><br>
                            <button id="${actionButtonId}" class="btn ${buttonClass} btn-sm">${buttonLabel}</button>
                        </div>
                    `;
                    setTimeout(() => {  
                        const actionButton = document.getElementById(actionButtonId);
                        if (actionButton) {
                            actionButton.addEventListener("click", function (event) {
                                event.stopPropagation();
                                event.preventDefault();
                                Swal.fire({
                                    title: isCancelable ? 'Cancel Booking?' : 'Are you sure?',
                                    text: isCancelable
                                        ? "Do you really want to cancel this booking?"
                                        : "Do you really want to delete this booking?",
                                    icon: isCancelable ? 'warning' : 'error',
                                    showCancelButton: true,
                                    confirmButtonText: isCancelable ? 'Yes, cancel it!' : 'Yes, delete it!',
                                    cancelButtonText: 'No, keep it'
                                }).then((result) => {
                                    if (!result.isConfirmed) return;
                                    let requestType = isCancelable ? "PATCH" : "DELETE";
                                    let requestData = isCancelable ? { requestStatus: 0 } : {};
                                    sendRequest(apiurl + "/" + modname + "/" + booking.id, requestType, requestData)
                                        .then(response => {
                                            if (response.status === "success") {
                                                Swal.fire({
                                                    icon: 'success',
                                                    title: isCancelable ? 'Booking Canceled!' : 'Deleted!',
                                                    text: isCancelable ?
                                                        'Booking has been successfully set to Canceled.' :
                                                        'Booking deleted successfully!',
                                                    timer: 2000,
                                                    showConfirmButton: false
                                                });
                                                loadData();
                                            } else {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Error',
                                                    text: response.message || "Failed to update booking."
                                                });
                                            }
                                        })
                                        .catch(error => {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Error',
                                                text: error.responseText || "Unknown error."
                                            });
                                        });
                                });
                            });
                        }
                    }, 200);
                    return tooltipHtml;
                },
                dataCellTemplate: function (cellData, index, container) {
                    const { ghm_room_id } = cellData.groups;
                    const currentTraining = getCurrentTraining(cellData.startDate.getDate(), ghm_room_id);
                    const wrapper = $('<div>')
                        .toggleClass(`employee-weekend-${ghm_room_id}`, isWeekEnd(cellData.startDate))
                        .appendTo(container)
                        .addClass(`employee-${ghm_room_id}`)
                        .addClass('dx-template-wrapper');
                    wrapper.append($('<div>')
                        .text(cellData.text)
                        .text(cellData.roomOccupancy)
                        .addClass(currentTraining)
                        .addClass('day-cell'));
                },
                resourceCellTemplate: function (cellData) {
                    const name = $('<div>')
                        .addClass('name')
                        .append($('<h2>').text(cellData.text));
                    const roomOccupancy = $('<div>')
                        .addClass('roomOccupancy')
                        .html(`Bed: ${cellData.data.roomOccupancy}`);
                    let bgColor;
                    if (cellData.data.roomOccupancy == 4) {
                        bgColor = "#B0BEC5"; // Hijau untuk kamar dengan banyak bed
                    } else if (cellData.data.roomOccupancy == 3) {
                        bgColor = "#90A4AE"; // Oranye untuk kamar dengan kapasitas sedang            
                    } else if (cellData.data.roomOccupancy == 2) {
                        bgColor = "#A5D6A7"; // Oranye untuk kamar dengan kapasitas sedang
                    } else {
                        bgColor = "#FFCCBC"; // Merah untuk kamar dengan kapasitas sedikit
                    }
                    const combinedColumn = $('<div>')
                        .addClass('combined-column')
                        .append(name, roomOccupancy)
                        .css({
                            backgroundColor: bgColor,
                            padding: '10px',
                            borderRadius: '5px',
                            color: '#fff',
                            textAlign: 'center'
                        });
                    return combinedColumn;
                },
                onCellPrepared: function (e) {
                    if (e.rowType == "data" && e.column.dataField === "code") {
                        const isCodeVisible = e.data.code !== null;
                        $("#formdata").dxDataGrid('columnOption', 'code', 'visible', isCodeVisible);
                    }
                    if (e.rowType == "data" && (e.column.index > 0 && e.column.index < 6)) {
                        if (!e.value || /^\s*$/.test(e.value)) {
                            e.cellElement.css({
                                "backgroundColor": "#ffe6e6",
                                "border": "0.5px solid #f56e6e"
                            });
                        }
                    }
                    if (e.rowType == "data" && e.data.isParent === 1) {
                        e.cellElement.css('background', 'rgba(128, 128, 0, 0.1)');
                    }
                },
                onAppointmentFormOpening: function (e) {
                    const form = e.form;
                    const appointmentData = e.appointmentData;
                    console.log('Appointment Data:', appointmentData);
                    function validateBooking() {
                        let guestCount = (form.getEditor("guest")?.option("value") || []).length;
                        let familyCount = (form.getEditor("family")?.option("value") || []).length;
                        let employeeCount = (form.getEditor("employee")?.option("value") || []).length;
                        let totalGuests = guestCount + familyCount + employeeCount;
                        console.log("total guest", totalGuests);
                        let selectedRoom = form.getEditor("ghm_room_id")?.option("value");
                        let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomOccupancy || 0;
                        console.log("total Kaps", roomCapacity);
                        let doneButton = $(".dx-popup-bottom .dx-button.dx-popup-done");
                        if (totalGuests > roomCapacity) {
                            DevExpress.ui.notify("Jumlah tamu melebihi kapasitas kamar!", "error", 2000);
                        }
                    }
                    form.option('items', [
                        {
                            itemType: 'group',
                            colCount: 1,
                            caption: 'Interests',
                            items: [
                                {
                                    label: { text: 'Code' },
                                    dataField: 'code',
                                    editorOptions: {
                                        readOnly: true,
                                        value: appointmentData.code || ''
                                    }
                                },
                                {
                                    label: { text: 'Purpose' },
                                    editorType: 'dxTextBox',
                                    dataField: 'text',
                                    editorOptions: {
                                        value: appointmentData.text || ''
                                    },
                                    validationRules: [{ type: "required", message: 'Purpose is required', }],
                                },
                                {
                                    label: { text: 'Details' },
                                    editorType: 'dxTextArea',
                                    dataField: 'description',
                                    editorOptions: {
                                        value: appointmentData.description || ''
                                    },
                                    validationRules: [{ type: "required", message: 'Details is required', }],
                                }
                            ]
                        },
                        {
                            itemType: 'group',
                            caption: 'Room & Date',
                            items: [
                                {
                                    label: { text: 'Room' },
                                    editorType: 'dxSelectBox',
                                    dataField: 'ghm_room_id',
                                    helpText: `Occupancy: ${appointmentData.roomOccupancy || 0} | 
                                                Booked: ${appointmentData.totalPeople || 0} | 
                                                Remaining: ${appointmentData.remainingCapacity || 0}`,

                                    editorOptions: {
                                        readOnly: true,
                                        dataSource: roomsWithLocations,
                                        displayExpr: function (item) {
                                            if (!item) return "";
                                            return `${item.location} | ${item.text}`;
                                        },
                                        valueExpr: 'id',
                                        value: appointmentData.ghm_room_id || null,
                                        onValueChanged: validateBooking()
                                    }
                                },
                                {
                                    label: { text: 'Start Date' },
                                    editorType: 'dxDateBox',
                                    dataField: 'startDate',
                                    editorOptions: {
                                        type: 'datetime',
                                        value: appointmentData.startDate,
                                        displayFormat: 'dd-MM-yyyy HH:mm:ss',
                                        dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                                    },
                                    validationRules: [{ type: "required", message: 'startDate is required' }],
                                },
                                {
                                    label: { text: 'End Date' },
                                    editorType: 'dxDateBox',
                                    dataField: 'endDate',
                                    editorOptions: {
                                        type: 'datetime',
                                        value: appointmentData.endDate,
                                        displayFormat: 'dd-MM-yyyy HH:mm:ss',
                                        dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ'
                                    },
                                    validationRules: [{ type: "required", message: 'endDate is required' }],
                                },
                                {
                                    label: { text: 'Status' },
                                    editorType: 'dxSelectBox',
                                    dataField: 'requestStatus',
                                    editorOptions: {
                                        readOnly: true,
                                        dataSource: [
                                            { id: "0", text: "Draft" },
                                            { id: "1", text: "Waiting Approval" },
                                            { id: "2", text: "Rework" },
                                            { id: "3", text: "Approved" },
                                            { id: "4", text: "Rejected" }
                                        ],
                                        displayExpr: "text",
                                        valueExpr: "id",
                                        value: String(appointmentData.requestStatus || "0") // Pastikan selalu dalam string
                                    }
                                }
                            ]
                        },
                        {
                            itemType: 'group',
                            colSpan: 2,
                            caption: 'Guest Type',
                            items: [
                                {
                                    title: 'Employee',
                                    label: { text: 'Employee' },
                                    editorType: 'dxTagBox',
                                    dataField: 'employee',
                                    editorOptions: {
                                        dataSource: emplo,
                                        displayExpr: function (item) {
                                            if (!item) return "";
                                            const department = departments.find(dept => dept.id === item.department_id);
                                            return `${item.FullName} | ${item.SAPID} | ${department ? department.DepartmentName : "Failed"}`;
                                        },
                                        valueExpr: 'id',
                                        value: Array.isArray(appointmentData.employee) ? appointmentData.employee : [],
                                        showSelectionControls: true,
                                        applyValueMode: 'useButtons',
                                        searchEnabled: true,
                                        onValueChanged: validateBooking
                                    }
                                },
                                {
                                    title: 'Guest',
                                    editorType: 'dxTagBox',
                                    dataField: 'guest',
                                    editorOptions: {
                                        dataSource: [],
                                        value: Array.isArray(appointmentData.guest) ? appointmentData.guest : [],
                                        acceptCustomValue: true,
                                        searchEnabled: true,
                                        showSelectionControls: true,
                                        applyValueMode: 'useButtons',
                                        onCustomItemCreating: function (args) {
                                            let newValue = args.text;
                                            let guests = form.option('formData').guest || [];
                                            if (!guests.includes(newValue)) {
                                                guests.push(newValue);
                                                args.customItem = newValue;
                                            } else {
                                                args.customItem = null;
                                            }
                                            form.updateData('guest', guests);
                                            validateBooking();
                                        }
                                    }
                                },
                                {
                                    title: 'Family',
                                    editorType: 'dxTagBox',
                                    dataField: 'family',
                                    editorOptions: {
                                        dataSource: [],
                                        value: Array.isArray(appointmentData.family) ? appointmentData.family : [],
                                        acceptCustomValue: true,
                                        searchEnabled: true,
                                        showSelectionControls: true,
                                        applyValueMode: 'useButtons',
                                        onCustomItemCreating: function (args) {
                                            let newValue = args.text;
                                            let familys = form.option('formData').family || [];
                                            if (!familys.includes(newValue)) {
                                                familys.push(newValue);
                                                args.customItem = newValue;
                                            } else {
                                                args.customItem = null;
                                            }
                                            form.updateData('family', familys);
                                            validateBooking();
                                        }
                                    }
                                }
                            ]
                        }
                    ]);
                },
                onAppointmentAdding: function (e) {
                    console.log("onAppointmentAdding triggered", e);
                    const appointmentData = e.appointmentData;
                    let scheduler = e.component;
                    let guestCount = safeArray(appointmentData.guest).length;
                    let familyCount = safeArray(appointmentData.family).length;
                    let employeeCount = safeArray(appointmentData.employee).length;
                    let totalNewGuests = guestCount + familyCount + employeeCount;
                    if (totalNewGuests < 1) {
                        DevExpress.ui.notify("Guest type is required", "error", 2000);
                        e.cancel = true;
                        return;
                    }
                    let selectedRoom = appointmentData.ghm_room_id;
                    let roomData = roomsWithLocations.find(room => room.id === selectedRoom);
                    if (!roomData) {
                        DevExpress.ui.notify("Room not Found", "error", 3000);
                        e.cancel = true;
                        return;
                    }
                    let sector = roomData.sector;
                    let roomCapacity = roomsWithLocations.find(room => room.id === selectedRoom)?.roomOccupancy || 0;
                    let dailyGuestCount = getTotalGuestsPerDay(scheduler, selectedRoom, appointmentData.startDate, appointmentData.endDate);
                    let bookingStart = new Date(appointmentData.startDate);
                    let bookingEnd = new Date(appointmentData.endDate);
                    console.log("Total new guests:", totalNewGuests);
                    console.log("Room capacity:", roomCapacity);
                    console.log("Daily guest count:", dailyGuestCount);
                    for (let d = new Date(bookingStart); d <= bookingEnd; d.setDate(d.getDate() + 1)) {
                        let dateKey = d.toISOString().split("T")[0]; // Format YYYY-MM-DD
                        let totalGuestsAfterAdding = (dailyGuestCount[dateKey] || 0) + totalNewGuests;
                        console.log(`Checking capacity for ${dateKey}: ${totalGuestsAfterAdding}/${roomCapacity}`);
                        if (totalGuestsAfterAdding > roomCapacity) {
                            e.cancel = true; // Batalkan booking
                            DevExpress.ui.notify(`Room has booket at ${dateKey}! (${dailyGuestCount[dateKey] || 0}/${roomCapacity})`, "error", 3000);
                            return;
                        }
                    }
                    console.log("Capacity check passed. Proceeding with submission...");
                    Swal.fire({
                        title: 'What do you want to do?',
                        text: 'Choose an option for this booking',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Submit Now',
                        cancelButtonText: 'Save as Draft',
                        reverseButtons: true
                    }).then((result) => {
                        console.log("Swal result:", result);
                        let requestStatus = 0;
                        if (!result.isConfirmed) {
                            console.log('Draft');
                            sendRequest(apiurl + "/" + modname, "POST", {
                                requestStatus: requestStatus,
                                text: appointmentData.text,
                                description: appointmentData.description,
                                startDate: appointmentData.startDate,
                                endDate: appointmentData.endDate,
                                ghm_room_id: appointmentData.ghm_room_id,
                                employee: appointmentData.employee,
                                guest: appointmentData.guest,
                                family: appointmentData.family,
                                sector: sector,
                            }).then(function () {
                                loadData();
                            });
                        } else {
                            console.log('Submit');
                            sendRequest(apiurl + "/" + modname, "POST", {
                                requestStatus: requestStatus,
                                text: appointmentData.text,
                                description: appointmentData.description,
                                startDate: appointmentData.startDate,
                                endDate: appointmentData.endDate,
                                ghm_room_id: appointmentData.ghm_room_id,
                                employee: appointmentData.employee,
                                guest: appointmentData.guest,
                                family: appointmentData.family,
                                sector: sector,
                            }).then(function (response) {
                                let valapprovalAction = null;
                                let actionForm = 'submission';
                                let valApprovalType = '';
                                let valremarks = '';
                                if (response.status == 'success') {
                                    const reqid = response.data.id;
                                    sendRequest(apiurl + "/submissionrequest/" + reqid + "/" + modelclass, "POST", {
                                        requestStatus: 1,
                                        action: actionForm,
                                        approvalAction: (valapprovalAction == null) ? 1 : parseInt(valapprovalAction),
                                        approvalType: valApprovalType,
                                        remarks: valremarks
                                    }).then(function (response) {
                                        if (response.status == 'success') {
                                            // reloadScheduler();
                                            loadData();
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Saved',
                                                text: 'The submission has been submited.',
                                            });
                                            
                                        }
                                    });
                                }
                                if (response.status === 'success') {
                                    loadData();
                                }
                            });
                        }
                    });
                },
                onAppointmentUpdating: function (e) {
                    const appointmentData = e.newData;
                    const currentStatus = e.oldData.requestStatus;
                    console.log("cs:", currentStatus, "tipe :", typeof currentStatus)
                    if (!["0", "2"].includes(currentStatus)) {
                        DevExpress.ui.notify("Booking dengan status ini tidak dapat diperbarui!", "error", 3000);
                        e.cancel = true;
                        return;
                    }
                    const formatDateForDB = (date) => {
                        const d = new Date(date);
                        return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')} ${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}:${d.getSeconds().toString().padStart(2, '0')}`;
                    };
                    appointmentData.startDate = formatDateForDB(appointmentData.startDate);
                    appointmentData.endDate = formatDateForDB(appointmentData.endDate);
                    appointmentData.id = e.oldData.id; // Pastikan id disertakan
                    console.log('Data update yang akan dikirim:', appointmentData);
                    console.log('Start Update Submit');
                    let requestStatus = 0;
                    Swal.fire({
                        title: 'What do you want to do?',
                        text: 'Choose an option for this booking',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Submit Now',
                        cancelButtonText: 'Save as Draft',
                        reverseButtons: true
                    }).then((result) => {
                        console.log("Swal result:", result);
                        if (!result.isConfirmed) {
                            console.log('Draft');
                            sendRequest(apiurl + "/" + modname + "/" + appointmentData.id, "PUT", {
                                requestStatus: requestStatus,
                                text: appointmentData.text,
                                description: appointmentData.description,
                                startDate: appointmentData.startDate,
                                endDate: appointmentData.endDate,
                                ghm_room_id: appointmentData.ghm_room_id,
                                employee: appointmentData.employee,
                                guest: appointmentData.guest,
                                family: appointmentData.family,
                            });
                        } else {
                            sendRequest(apiurl + "/" + modname + "/" + appointmentData.id, "PUT", {
                                requestStatus: requestStatus,
                                text: appointmentData.text,
                                description: appointmentData.description,
                                startDate: appointmentData.startDate,
                                endDate: appointmentData.endDate,
                                ghm_room_id: appointmentData.ghm_room_id,
                                employee: appointmentData.employee,
                                guest: appointmentData.guest,
                                family: appointmentData.family,
                            }).then(function (response) {
                                loadData();
                                let valapprovalAction = null;
                                let actionForm = 'submission';
                                let valApprovalType = '';
                                let valremarks = '';
                                if (response.status == 'success') {
                                    const reqid = appointmentData.id;
                                    sendRequest(apiurl + "/submissionrequest/" + reqid + "/" + modelclass, "POST", {
                                        requestStatus: 1,
                                        action: actionForm,
                                        approvalAction: (valapprovalAction == null) ? 1 : parseInt(valapprovalAction),
                                        approvalType: valApprovalType,
                                        remarks: valremarks
                                    }).then(function (response) {
                                        if (response.status == 'success') {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Saved',
                                                text: 'The submission has been submitted.',
                                            });
                                            loadData();
                                        }
                                    });
                                }
                            });
                        }
                    })
                }
            }).dxScheduler("instance");
        });
    }
    function isWeekEnd(date) {
        const day = date.getDay();
        return day === 0 || day === 6;
    }
    function getCurrentTraining(date, ghm_room_id) {
        const result = (date + ghm_room_id) % 3;
        const currentTraining = `training-background-${result}`;
        return currentTraining;
    }
    updateRoomSelector(uniqueLocations[0]);
    $('#btnadd').on('click', function () {
        sendRequest(apiurl + "/" + modname, "POST", { requestStatus: 0 }).then(function (response) {
            const reqid = response.data.id;
            console.log(reqid);
            const mode = 'add';
            const options = { "data": { "isMine": 1 } };
            popup.option({
                contentTemplate: () => popupContentTemplate(reqid, mode, options),
            });
            popup.show();
        });
    });
});
