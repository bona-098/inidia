function reloadScheduler() {
    if (!schedulerInstance) {
        console.error("Scheduler instance is not initialized.");
        return;
    }

    const schedulerElement = document.querySelector("#scheduler");
    if (!schedulerElement) {
        console.error("Scheduler element not found in DOM.");
        return;
    }

    schedulerInstance.getDataSource().reload().done(() => {
        console.log("Scheduler data reloaded successfully.");
        schedulerInstance.repaint(); // Perbarui tampilan scheduler
    }).fail((error) => {
        console.error("Failed to reload scheduler data:", error);
    });
}


$(document).ready(function () {
    const schedulerElement = document.querySelector("#scheduler");
    if (!schedulerElement) {
        console.error("Scheduler element not found in DOM.");
        return;
    }

    schedulerInstance = $("#scheduler").dxScheduler({
        // Konfigurasi scheduler...
    }).dxScheduler("instance");

    console.log("Scheduler initialized successfully.");
});


sendRequest(apiurl + "/" + modname, "POST", data)
    .then(function (response) {
        if (response.status === 'success') {
            alert('Booking created successfully!');
            reloadScheduler(); // Panggil reloadScheduler setelah POST berhasil
        } else {
            alert('Error: ' + response.message);
        }
    })
    .catch(function (error) {
        alert('Error: ' + error.responseText);
    });


$(function () {
    // Inisialisasi scheduler
    const schedulerElement = document.querySelector("#scheduler");
    if (!schedulerElement) {
        console.error("Scheduler element not found in DOM.");
        return;
    }

    schedulerInstance = $("#scheduler").dxScheduler({
        timeZone: 'Asia/Makassar',
        dataSource: booking,
        repaintChangesOnly: true,
        views: ['month'],
        currentView: 'month',
        currentDate: new Date(),
        firstDayOfWeek: 1,
        startDayHour: 10,
        endDayHour: 22,
        colorExpr: "color",
        showAllDayPanel: false,
        height: 710,
        groups: ['ghm_room_id'],
        resources: [
            {
                fieldExpr: 'ghm_room_id',
                allowMultiple: false,
                dataSource: roomsWithLocations,
                label: 'Room Name',
            },
        ],
        editing: {
            refreshMode: 'reshape',
            mode: 'cell',
            allowAdding: true,
            allowUpdating: true,
            allowDeleting: true,
        },
        // Konfigurasi lainnya...
    }).dxScheduler("instance");

    console.log("Scheduler initialized successfully.");

    // Fungsi untuk memuat ulang data scheduler
    function reloadScheduler() {
        if (!schedulerInstance) {
            console.error("Scheduler instance is not initialized.");
            return;
        }

        const schedulerElement = document.querySelector("#scheduler");
        if (!schedulerElement) {
            console.error("Scheduler element not found in DOM.");
            return;
        }

        schedulerInstance.getDataSource().reload().done(() => {
            console.log("Scheduler data reloaded successfully.");
            schedulerInstance.repaint(); // Perbarui tampilan scheduler
        }).fail((error) => {
            console.error("Failed to reload scheduler data:", error);
        });
    }

    // Fungsi untuk menangani submit form
    function submitFormData() {
        if (dataSubmitted) return; // Prevent duplicate submissions

        dataSubmitted = true;
        const formData = $('#booking-form').serializeArray();
        const employeeIdsField = formData.find(field => field.name === 'employee');
        const guestField = formData.find(field => field.name === 'guest');
        guestField.value = (guestField.value.split(',').map(name => name.trim()));
        const familyField = formData.find(field => field.name === 'family');
        familyField.value = serializeToJSON(familyField.value.split(',').map(name => name.trim()));

        sendRequest(apiurl + "/" + modname, "POST", formData)
            .then(function (response) {
                if (response.status === 'success') {
                    alert('Booking created successfully!');
                    reloadScheduler(); // Memuat ulang data scheduler setelah POST berhasil
                } else {
                    alert('Error: ' + response.message);
                }
            })
            .catch(function (error) {
                alert('Error: ' + error.responseText);
            })
            .finally(function () {
                dataSubmitted = false; // Reset the flag after submission
            });
    }

    // Event listener untuk form submission
    $('#booking-form').on('submit', function (event) {
        event.preventDefault();
        submitFormData();
    });
});



$(function () {
    // Inisialisasi scheduler
    const schedulerElement = document.querySelector("#scheduler");
    if (!schedulerElement) {
        console.error("Scheduler element not found in DOM.");
        return;
    }

    schedulerInstance = $("#scheduler").dxScheduler({
        timeZone: 'Asia/Makassar',
        dataSource: booking,
        repaintChangesOnly: true,
        views: ['month'],
        currentView: 'month',
        currentDate: new Date(),
        firstDayOfWeek: 1,
        startDayHour: 10,
        endDayHour: 22,
        colorExpr: "color",
        showAllDayPanel: false,
        height: 710,
        groups: ['ghm_room_id'],
        resources: [
            {
                fieldExpr: 'ghm_room_id',
                allowMultiple: false,
                dataSource: roomsWithLocations,
                label: 'Room Name',
            },
        ],
        editing: {
            refreshMode: 'reshape',
            mode: 'cell',
            allowAdding: true,
            allowUpdating: true,
            allowDeleting: true,
        },
        // Konfigurasi lainnya...
    }).dxScheduler("instance");

    console.log("Scheduler initialized successfully.");

    // Fungsi untuk memuat ulang data scheduler
    function reloadScheduler() {
        if (!schedulerInstance) {
            console.error("Scheduler instance is not initialized.");
            return;
        }

        const schedulerElement = document.querySelector("#scheduler");
        if (!schedulerElement) {
            console.error("Scheduler element not found in DOM.");
            return;
        }

        schedulerInstance.getDataSource().reload().done(() => {
            console.log("Scheduler data reloaded successfully.");
            schedulerInstance.repaint(); // Perbarui tampilan scheduler
        }).fail((error) => {
            console.error("Failed to reload scheduler data:", error);
        });
    }

    // Fungsi untuk menangani submit form
    function submitFormData() {
        if (dataSubmitted) return; // Prevent duplicate submissions

        dataSubmitted = true;
        const formData = $('#booking-form').serializeArray();
        const employeeIdsField = formData.find(field => field.name === 'employee');
        const guestField = formData.find(field => field.name === 'guest');
        guestField.value = (guestField.value.split(',').map(name => name.trim()));
        const familyField = formData.find(field => field.name === 'family');
        familyField.value = serializeToJSON(familyField.value.split(',').map(name => name.trim()));

        sendRequest(apiurl + "/" + modname, "POST", formData)
            .then(function (response) {
                if (response.status === 'success') {
                    alert('Booking created successfully!');
                    reloadScheduler(); // Memuat ulang data scheduler setelah POST berhasil
                } else {
                    alert('Error: ' + response.message);
                }
            })
            .catch(function (error) {
                alert('Error: ' + error.responseText);
            })
            .finally(function () {
                dataSubmitted = false; // Reset the flag after submission
            });
    }

    // Event listener untuk form submission
    $('#booking-form').on('submit', function (event) {
        event.preventDefault();
        submitFormData();
    });
});
