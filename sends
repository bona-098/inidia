Challenges:
The request completion process by the HRSC team faces several key challenges, including difficulty in tracking request progress, identifying bottlenecks in service completion, and delays in responding to user requests due to the absence of a structured time-tracking system. Additionally, without data-driven analysis, it is challenging for the HRSC team to evaluate performance and optimize the time required to complete each request.

Improvements Made:
To address these challenges, HRSC Report was developed as a system that provides real-time tracking and monitoring of request processing time. The system presents data in a structured table, including key information such as request submission time, processing start time, completion time, and total duration. With this feature, the HRSC team can identify delayed requests, analyze service completion trends, and improve efficiency by establishing standard processing times based on historical data. Moreover, an interactive dashboard enables management to monitor overall service performance and make data-driven decisions to enhance the responsiveness and effectiveness of HRSC services.

Let me know if you need further refinements! 😊🚀


The monitoring of HR Service Care performance faces several key challenges, including low efficiency due to time-consuming manual processes, scattered data without clear integration, and difficulties in identifying weaknesses in HR services. Additionally, a lack of transparency in performance evaluation often leads to decision-making based on intuition rather than accurate data. Measuring employee satisfaction with HR services is also challenging, along with poorly structured report documentation, which hinders continuous quality improvement.
"Optimizing HR Services with HRSC Report: A Data-Driven Innovation"
function onAppointmentFormOpening(e) {
    const form = e.form;
    const appointmentData = e.appointmentData;
    const isNewAppointment = e.appointmentData.id === undefined;

    // Helper functions
    const getDayRange = (date) => {
        const start = new Date(date);
        start.setHours(0, 0, 0, 0);
        const end = new Date(date);
        end.setHours(23, 59, 59, 999);
        return { start, end };
    };

    const safeParseInt = (value) => {
        return parseInt(value?.toString()?.replace(/\D/g, '')) || 0;
    };

    // Fungsi validasi utama
    const validateRoomCapacity = async (selectedRoom, startDate, endDate, newGuests) => {
        const room = roomsWithLocations.find(r => r.id === selectedRoom);
        if (!room) return { isValid: false, message: 'Room not found' };

        try {
            const existingBookings = await loadExistingBookings(); // Fungsi load data booking
            let currentDate = new Date(startDate);
            const lastDate = new Date(endDate);
            const roomCapacity = room.roomOccupancy;

            while (currentDate <= lastDate) {
                const dailyGuests = existingBookings
                    .filter(b => 
                        b.ghm_room_id === selectedRoom &&
                        new Date(b.startDate) <= getDayRange(currentDate).end &&
                        new Date(b.endDate) >= getDayRange(currentDate).start &&
                        b.requestStatus !== 4 // Exclude rejected
                    )
                    .reduce((sum, b) => sum + safeParseInt(b.totalPeople), 0);

                const total = dailyGuests + newGuests;
                
                console.log(`Date: ${currentDate.toISOString().split('T')[0]}`, {
                    existing: dailyGuests,
                    new: newGuests,
                    capacity: roomCapacity
                });

                if (total > roomCapacity) {
                    return {
                        isValid: false,
                        message: `Melebihi kapasitas pada ${currentDate.toLocaleDateString()}! 
                        (Kapasitas: ${roomCapacity}, Terisi: ${dailyGuests}, Tambahan: ${newGuests})`
                    };
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }
            return { isValid: true };
        } catch (error) {
            console.error('Validation error:', error);
            return { isValid: false, message: 'Error validating capacity' };
        }
    };

    // Update form items
    form.option('items', [{
        itemType: 'group',
        colCount: 2,
        items: [
            {
                dataField: 'text',
                label: { text: 'Purpose' },
                editorType: 'dxTextBox',
                validationRules: [{ type: "required" }]
            },
            {
                dataField: 'ghm_room_id',
                label: { text: 'Room' },
                editorType: 'dxSelectBox',
                editorOptions: {
                    dataSource: roomsWithLocations,
                    displayExpr: 'text',
                    valueExpr: 'id',
                    onValueChanged: async (e) => {
                        const validation = await validateRoomCapacity(
                            e.value,
                            new Date(appointmentData.startDate),
                            new Date(appointmentData.endDate),
                            safeParseInt(appointmentData.totalPeople)
                        );
                        
                        if (!validation.isValid) {
                            DevExpress.ui.notify({
                                message: validation.message,
                                type: 'error',
                                displayTime: 5000
                            });
                        }
                    }
                }
            },
            {
                dataField: 'startDate',
                label: { text: 'Start Date' },
                editorType: 'dxDateBox',
                editorOptions: {
                    type: 'datetime',
                    onValueChanged: async (e) => {
                        const validation = await validateRoomCapacity(
                            appointmentData.ghm_room_id,
                            e.value,
                            new Date(appointmentData.endDate)),
                            safeParseInt(appointmentData.totalPeople)
                        );
                        
                        form.getEditor('ghm_room_id').option('helpText', 
                            validation.isValid ? '✅ Valid' : `❌ ${validation.message}`);
                    }
                }
            },
            {
                dataField: 'endDate',
                label: { text: 'End Date' },
                editorType: 'dxDateBox',
                editorOptions: {
                    type: 'datetime',
                    onValueChanged: async (e) => {
                        const validation = await validateRoomCapacity(
                            appointmentData.ghm_room_id,
                            new Date(appointmentData.startDate),
                            e.value,
                            safeParseInt(appointmentData.totalPeople)
                        );
                        
                        form.getEditor('ghm_room_id').option('helpText', 
                            validation.isValid ? '✅ Valid' : `❌ ${validation.message}`);
                    }
                }
            },
            {
                itemType: 'group',
                caption: 'Participants',
                items: [
                    {
                        dataField: 'employee',
                        editorType: 'dxTagBox',
                        editorOptions: {
                            dataSource: employees,
                            displayExpr: 'FullName',
                            valueExpr: 'id',
                            searchEnabled: true
                        }
                    },
                    {
                        dataField: 'guest',
                        editorType: 'dxTagBox',
                        editorOptions: {
                            items: [],
                            acceptCustomValue: true,
                            onCustomItemCreating: (e) => {
                                if (!e.text) return;
                                const newItems = [...(appointmentData.guest || []), e.text];
                                appointmentData.guest = [...new Set(newItems)];
                            }
                        }
                    }
                ]
            }
        ]
    }]);

    // Custom validation sebelum submit
    form.option('validationGroup').validate().then((result) => {
        if (result.isValid) {
            const totalPeople = (appointmentData.employee?.length || 0) + 
                              (appointmentData.guest?.length || 0);
            
            validateRoomCapacity(
                appointmentData.ghm_room_id,
                new Date(appointmentData.startDate),
                new Date(appointmentData.endDate)),
                totalPeople
            ).then(validationResult => {
                if (!validationResult.isValid) {
                    form.option('validationGroup')._validationControls[0]._setValidationStatus('invalid');
                    DevExpress.ui.notify({
                        message: validationResult.message,
                        type: 'error',
                        displayTime: 5000
                    });
                }
            });
        }
    });
}
